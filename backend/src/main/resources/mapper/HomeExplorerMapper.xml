<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.svnlan.home.dao.HomeExplorerDao">

    <select id="getHomeExplorer" resultType="com.svnlan.home.vo.HomeExplorerVO">
        select io.sourceID,io.sourceHash,io.targetType,io.targetID,io.createUser,io.modifyUser,io.isFolder,io.`name`,io.fileType,io.parentID, io.sort,
        io.parentLevel,io.fileID,io.isDelete,io.`size`,io.createTime,io.modifyTime,io.viewTime,f.path,fm.`value`, f.hashMd5, f.is_preview preview
        , f.createTime fileCreateTime, f.isExistFile, f.is_m3u8 isM3u8, io.canShare, io.description,f.is_h264_preview isH264Preview
        from io_source io
        left join `io_file` f on io.fileID = f.fileID
        left join `io_file_meta` fm on io.fileID = fm.fileID and fm.`key` = 'fileInfoMore'
        <if test="tagID != null ">
          left join user_fav uf on io.sourceID = uf.path and uf.`type` = 'source'
        </if>
        where io.isDelete = 0
        <include refid="getHomeExplorer_WHERE" />
        order by io.sort desc , io.isFolder desc, ${sortField} ${sortType}, io.sourceID asc
        <if test="startIndex >= 0 and 0 != pageSize">
            LIMIT #{startIndex}, #{pageSize}
        </if>
    </select>

    <select id="getCountHomeExplorer" resultType="java.lang.Long">
        select count(io.sourceID)
        from io_source io
        <if test="repeatHashMd5 != null">
            left join `io_file` f on io.fileID = f.fileID
        </if>
        left join `io_file_meta` fm on io.fileID = fm.fileID and fm.`key` = 'fileInfoMore'
        <if test="tagID != null ">
            left join user_fav uf on io.sourceID = uf.path and uf.`type` = 'source'
        </if>
        where io.isDelete = 0
        <include refid="getHomeExplorer_WHERE" />
    </select>

    <sql id="getHomeExplorer_WHERE">

        <if test="sourceID != null">
            and io.parentID = #{sourceID}
        </if>
        <if test="thisSourceID != null">
            and io.sourceID = #{thisSourceID}
        </if>
        <if test="targetType != null">
            and io.targetType = #{targetType}
        </if>
        <if test="parentLevel != null">
            and io.parentLevel = #{parentLevel}
        </if>
        <if test="tagID != null">
            and uf.tagID = #{tagID}
        </if>
        <if test="isFolder != null">
            and io.isFolder = #{isFolder}
        </if>
        <if test="repeatHashMd5 != null">
            and f.hashMd5 = #{repeatHashMd5}
        </if>
        <if test="repeatName != null">
            and io.name = #{repeatName}
        </if>
        <if test="parentLevelList != null">
            and (
            <foreach collection="parentLevelList" item="pLe" open="(" close=")" separator="or">
                io.parentLevel  like concat('%', #{pLe}, '%')
            </foreach>
            )
        </if>
        <if test="keyword != null">
            and ( io.name like concat('%', #{keyword}, '%') OR io.`name_pinyin` LIKE CONCAT('%',#{keyword}, '%')
            OR io.`name_pinyin_simple` LIKE CONCAT('%',#{keyword}, '%')
            )
        </if>
        <if test="userID != null">
            <choose>
                <when test="isSearch != null and isSearch == 1 ">
                    and (io.createUser = #{userID} or io.modifyUser = #{userID})
                </when>
                <otherwise>
                    and (io.createUser = #{userID})
                </otherwise>
            </choose>
        </if>

        <choose>
            <when test="documentType != null ">
                and io.`type` = #{documentType}
            </when>
            <when test="fileTypeList != null ">
                and io.fileType in
                <foreach collection="fileTypeList" item="fileTypeItem" open="(" close=")" separator=",">
                    #{fileTypeItem}
                </foreach>
            </when>
        </choose>
        <choose>
            <when test="minSize != null">
                <choose>
                    <when test="maxSize != null">
                        and (io.size between #{minSize} and #{maxSize})
                    </when>
                    <otherwise>
                        and (io.size >= #{minSize})
                    </otherwise>
                </choose>
            </when>
            <otherwise>
                <if test="maxSize != null">
                    and ( #{maxSize} >=io.size)
                </if>
            </otherwise>
        </choose>
        <choose>
            <when test="minDate != null">
                <choose>
                    <when test="maxDate != null">
                        and (io.createTime between #{minDate} and #{maxDate})
                    </when>
                    <otherwise>
                        and (io.createTime >= #{minDate})
                    </otherwise>
                </choose>
            </when>
            <otherwise>
                <if test="maxDate != null">
                    and ( #{maxDate} >=io.createTime)
                </if>
            </otherwise>
        </choose>
        <if test="targetType != null and targetType == 2">
            and not exists (select sourceID from group_source gs where io.sourceID = gs.sourceID )
        </if>

    </sql>

    <select id="getFileDetail" resultType="com.svnlan.home.vo.HomeFileDetailVO">
        select fileID, `name`, `size`, ioType, path, hashSimple, hashMd5, linkCount, createTime, modifyTime
        from io_file
        where fileID = #{fileID}
    </select>
    <insert id="createDir" useGeneratedKeys="true" keyProperty="sourceID" >
        insert into io_source(sourceHash, targetType, targetID, createUser, modifyUser, isFolder,
                              `name`, fileType, parentID, parentLevel, fileID, isDelete, `size`, createTime, modifyTime,
                              viewTime,storageID,name_pinyin,name_pinyin_simple)
        values ('', #{targetType}, #{targetID}, #{createUser}, #{modifyUser}, #{isFolder}, #{name}, #{fileType}, #{parentID}, #{parentLevel}, #{fileID}, 0, 0, unix_timestamp(), unix_timestamp(),
                unix_timestamp(), IFNULL(#{storageID},0), #{namePinyin}, #{namePinyinSimple}
                )
    </insert>

    <select id="getHomeSpace" resultType="com.svnlan.home.vo.HomeExplorerVO">
        select sourceID,targetType,targetID,isFolder,`name`,fileType,parentID,fileID,`size`,createTime,modifyTime,parentLevel,description
        from io_source
        where targetType = 1
        and targetID = #{targetID}
        and parentID = #{parentID}
        and isFolder = 1
        and isDelete = 0
        order by createTime asc limit 1
    </select>

    <select id="getEnterpriseSpace" resultType="com.svnlan.home.vo.HomeExplorerVO">
        select sourceID,targetType,targetID,isFolder,`name`,fileType,parentID,fileID,`size`,createTime,modifyTime, 0 groupID, '' groupName, 0 sizeMax
        from io_source
        where targetType = 2
        and parentID = 0
        and isFolder = 1
        and isDelete = 0
        order by sourceID asc limit 1 
    </select>

    <select id="getSourceChileCont" resultType="com.svnlan.home.vo.HomeExplorerVO">
        select parentID,isFolder, count(1) fileCount
        from io_source io
        where io.isDelete = 0
        and io.parentID in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
        group by parentID,io.isFolder
    </select>

    <update id="updateMemory">
        update `group`
        set sizeUse = sizeUse + #{memory}
        where groupID = #{groupID}
    </update>
    <update id="updateMemoryList">
        update `group`
        set sizeUse = sizeUse + #{memory}
        where groupID in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </update>
    <update id="updateUserMemory">
        update `user`
        set sizeUse = sizeUse + #{memory}
        where userID = #{userID}
    </update>
    <update id="updateSubtractUseUserMemory">
        update `user`
        set sizeUse = sizeUse - #{memory}
        where userID = #{userID}
    </update>
    <update id="batchUpdateGroupMemoryList">
        update `group`
        <set>
            <trim prefix="`sizeUse`=case" suffix="end">
                <foreach collection="list" item="item" index="index">
                    when groupID=#{item.groupID} then `sizeUse` - #{item.sizeUse}
                </foreach>
            </trim>
        </set>
        where groupID in
        <foreach collection="list" item="item" index="index" separator="," open="(" close=")">
            #{item.groupID}
        </foreach>
    </update>

    <select id="getUserSpace" resultType="com.svnlan.home.vo.HomeExplorerVO">
        (select 'user' sourceType,0 groupID,'' groupName,0 sizeMax, 0 sizeUse, u.sizeMax userSizeMax ,u.sizeUse userSizeUse, r.ignoreFileSize
                from `user` u, role r
                where r.roleID = u.roleID and  u.userID = #{userID})
        <if test=" groupID != null and groupID > 0 ">
            union

            (select 'group' sourceType, groupID,`name` groupName, sizeMax, sizeUse, 0 userSizeMax ,0 userSizeUse, 0 ignoreFileSize
            from `group`
            where   groupID = #{groupID} )
        </if>
    </select>

    <select id="getUserFavExplorer" resultType="com.svnlan.home.vo.HomeExplorerVO">

        (select uf.id favID, uf.sort favSort, uf.path favPath, uf.`name` favName, uf.`type` favType,
        io.sourceID,io.targetType,io.targetID,io.createUser,io.modifyUser,io.isFolder
        ,io.`name`,io.fileType,io.parentID,
        io.parentLevel,io.fileID,io.isDelete,io.`size`,io.createTime,io.modifyTime,f.path,fm.`value`, f.hashMd5,
        io.description, f.isExistFile, f.is_m3u8 isM3u8, io.canShare,f.is_h264_preview isH264Preview
        from user_fav uf
        left join io_source io on io.sourceID = uf.path
        left join `io_file` f on io.fileID = f.fileID
        left join `io_file_meta` fm on io.fileID = fm.fileID and fm.`key` = 'fileInfoMore'
        where uf.userID = #{userID}
        and uf.tagID = 0
        and uf.`type` = 'source'
        and io.isDelete = 0
        <if test="keyword != null">
            and ( io.name like concat('%', #{keyword}, '%') OR io.`name_pinyin` LIKE CONCAT('%',#{keyword}, '%')
            OR io.`name_pinyin_simple` LIKE CONCAT('%',#{keyword}, '%')
            )
        </if>)

        union ALL

        (select uf.id favID, uf.sort favSort, uf.path favPath, uf.`name` favName, uf.`type` favType, 0 sourceID,'' targetType,0 targetID,0 createUser,0 modifyUser,0 isFolder
        ,'' `name`,'' fileType,0 parentID,
        '' parentLevel,0 fileID,0 isDelete,0 `size`,0 createTime,0 modifyTime,'' path,'' `value`, '' hashMd5, '' description,  0 isExistFile, 0 isM3u8, 0 canShare
        ,0 isH264Preview
        from user_fav uf
        where uf.userID = #{userID}
        and uf.tagID = 0
        and uf.`type` = 'folder')

        order by favSort desc, isFolder desc, ${sortField} ${sortType}
    </select>
    <select id="getUserRecycleExplorer" resultType="com.svnlan.home.vo.HomeExplorerVO">
        select io.sourceID,io.sourceHash,io.targetType,io.targetID,io.createUser,io.modifyUser,io.isFolder,io.`name`,io.fileType,io.parentID,
        io.parentLevel,io.fileID,io.isDelete,io.`size`,io.createTime,io.modifyTime,io.viewTime,f.path,fm.`value`, f.hashMd5, io.description
        , f.isExistFile, f.is_m3u8 isM3u8, io.canShare,f.is_h264_preview isH264Preview
        from io_source_recycle uf
        inner join io_source io  on io.sourceID = uf.sourceID
        left join `io_file` f on io.fileID = f.fileID
        left join `io_file_meta` fm on io.fileID = fm.fileID and fm.`key` = 'fileInfoMore'
        where uf.userID = #{userID}
        and io.isDelete = 1
        <if test="keyword != null">
            and ( io.name like concat('%', #{keyword}, '%') OR io.`name_pinyin` LIKE CONCAT('%',#{keyword}, '%')
            OR io.`name_pinyin_simple` LIKE CONCAT('%',#{keyword}, '%')
            )
        </if>
        order by ${sortField} ${sortType}
    </select>

    <select id="getUserRencentExplorer" resultType="com.svnlan.home.vo.HomeExplorerVO">
        select io.sourceID,io.sourceHash,io.targetType,io.targetID,io.createUser,io.modifyUser,io.isFolder,io.`name`,io.fileType,io.parentID,
        io.parentLevel,io.fileID,io.isDelete,io.`size`,io.createTime,uf.createTime modifyTime,f.path,fm.`value`, f.hashMd5, io.description
        , f.isExistFile, f.is_m3u8 isM3u8, io.canShare,f.is_h264_preview isH264Preview
        from io_source_event uf
        inner join io_source io  on io.sourceID = uf.sourceID
        left join `io_file` f on io.fileID = f.fileID
        left join `io_file_meta` fm on io.fileID = fm.fileID and fm.`key` = 'fileInfoMore'
        where uf.userID = #{userID}
        and uf.`type` in ('create','edit')
        and io.isDelete = 0
        and io.isFolder = 0
        and io.targetType in (1,2)
        <if test="keyword != null">
            and ( io.name like concat('%', #{keyword}, '%') OR io.`name_pinyin` LIKE CONCAT('%',#{keyword}, '%')
            OR io.`name_pinyin_simple` LIKE CONCAT('%',#{keyword}, '%')
            )
        </if>
        group by io.sourceID
        order by ${sortField} ${sortType}
    </select>
    <select id="getOneSourceInfo" resultType="com.svnlan.home.vo.HomeExplorerVO">
        select sourceID, parentID, parentLevel,targetType, `name`
        from io_source
        where sourceID = #{sourceID}
    </select>

    <select id="getUserGroupSourceList" resultType="com.svnlan.home.vo.HomeExplorerVO">
        SELECT ug.userID, g.groupID, s.`name`,s.parentID, s.parentLevel, g.sizeMax, s.`size` sizeUse, ug.authID, r.auth, s.sourceID, s.createTime
        , s.createUser, s.modifyTime, s.modifyUser, r.role_name authName, r.label,s.description
        FROM user_group ug
        INNER JOIN `group` g ON ug.groupID = g.groupID
        INNER JOIN `group_source` gs ON ug.groupID = gs.groupID
        INNER JOIN `io_source` s ON s.sourceID = gs.sourceID
        INNER JOIN `role` r ON r.roleID = ug.authID
        WHERE ug.userID = #{userID}
        and g.`status` = 1
        order by s.createTime asc
    </select>
    <select id="getSystemGroupSourceList" resultType="com.svnlan.home.vo.HomeExplorerVO">
        SELECT g.groupID, s.`name`,s.parentID, s.parentLevel, g.sizeMax, s.`size` sizeUse, 0 authID, '' auth, s.sourceID, s.createTime
        , s.createUser, s.modifyTime, s.modifyUser,s.description
        FROM `group` g
        INNER JOIN `group_source` gs ON g.groupID = gs.groupID
        INNER JOIN `io_source` s ON s.sourceID = gs.sourceID
        WHERE g.parentID = 0 and g.`status` = 1
        order by s.createTime asc
    </select>
    <select id="getUserIdentityInfo" resultType="java.lang.Integer">
        select  r.administrator
        from `user` u
        join  `role` r on u.roleID = r.roleID and r.status = 1 and enable = 1
        where u.userID = #{userID}
        and u.status = 1
    </select>

    <select id="getParentName" resultType="java.lang.String">
        select  `name` from `io_source` where sourceID = #{sourceID}
    </select>

    <select id="getParentNameList" resultType="com.svnlan.home.vo.HomeExplorerVO">
        select sourceID, `name` parentName from `io_source`
        where sourceID in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>
    <select id="checkUserRecycleExplorer" resultType="java.lang.Integer">
        select count(1)
        from io_source_recycle uf
        LEFT JOIN io_source io ON   io.sourceID = uf.sourceID
        where uf.userID = #{userID}
        and io.isDelete = 1
    </select>
    <select id="getGroupParentLevel" resultType="java.lang.String">
        select  `parentLevel` from `group` where groupID = #{groupID}
    </select>
    <insert id="createDirectory" useGeneratedKeys="true" keyProperty="sourceID" >
        insert into io_source(sourceHash, targetType, targetID, createUser, modifyUser, isFolder,
                              `name`, fileType, parentID, parentLevel, fileID, isDelete, `size`, createTime, modifyTime,
                              viewTime, storageID,name_pinyin,name_pinyin_simple)
        values ('', #{targetType}, #{targetID}, #{createUser}, #{modifyUser}, #{isFolder}, #{name}, #{fileType}, #{parentID}, #{parentLevel}, #{fileID}, 0, 0, unix_timestamp(), unix_timestamp(),
                unix_timestamp(), IFNULL(#{storageID},0), #{namePinyin}, #{namePinyinSimple}
                )
    </insert>

    <select id="getGroupParentLevelList" resultType="java.lang.String">
        select  CONCAT(g.`parentLevel`, g.groupID) parentLevel
        from `group` g, group_source gs
        where g.groupID = gs.groupID
        and gs.sourceID in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>

    <select id="getImgAndAudioHomeExplorer" resultType="com.svnlan.home.vo.HomeExplorerVO">
        <if test="lnkAudio == 1">
            select f.fileID,f.path,fm.`value`, f.hashMd5, f.is_h264_preview isH264Preview
            from `io_file` f
            left join `io_file_meta` fm on f.fileID = fm.fileID and fm.`key` = 'fileInfoMore'
            where f.fileID in
            <foreach collection="list" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="lnkAudio == 0">
            select f.fileID,f.path,'' `value`, f.hashMd5, 0 isH264Preview
            from `io_file` f
            where f.fileID in
            <foreach collection="list" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
    </select>
    <select id="getFolderAndImgAndAudioHomeExplorer" resultType="com.svnlan.home.vo.HomeExplorerVO">
        <if test="lnkAudio == 1">
            select io.sourceID,io.parentID,io.parentLevel, f.fileID,f.path,fm.`value`, f.hashMd5, f.is_h264_preview isH264Preview, io.name
            from `io_source` io
            left join `io_file` f on f.fileID = io.fileID
            left join `io_file_meta` fm on io.fileID = fm.fileID and fm.`key` = 'fileInfoMore'
            where io.sourceID in
            <foreach collection="list" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="lnkAudio == 0">
            select io.sourceID,io.parentID,io.parentLevel,f.fileID,f.path,'' `value`, f.hashMd5, 0 isH264Preview, io.name
            from `io_source` io
            left join `io_file` f on f.fileID = io.fileID
            where io.sourceID in
            <foreach collection="list" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
    </select>


    <select id="getImgByFolderList" resultType="com.svnlan.home.vo.HomeExplorerVO">
        select io.sourceID,io.sourceHash,io.targetType,io.targetID,io.createUser,io.modifyUser,io.isFolder,io.`name`,io.fileType,io.parentID, io.sort,
        io.parentLevel,io.fileID,io.isDelete,io.`size`,io.createTime,io.modifyTime,io.viewTime,f.path, f.hashMd5, f.is_preview preview

        from io_source io
        left join `io_file` f on io.fileID = f.fileID
        where io.isDelete = 0
        <if test="parentID != null">
            and io.parentID = #{parentID}
        </if>
        and io.isFolder = 0
        and io.fileType in
        <foreach collection="fileTypeList" item="fileTypeItem" open="(" close=")" separator=",">
            #{fileTypeItem}
        </foreach>
        order by io.sort desc , io.`name` asc, io.sourceID asc

    </select>
</mapper>
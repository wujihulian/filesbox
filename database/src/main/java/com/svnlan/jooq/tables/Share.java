/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables;


import com.svnlan.jooq.CloudDisk;
import com.svnlan.jooq.Indexes;
import com.svnlan.jooq.Keys;
import com.svnlan.jooq.tables.records.ShareRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 分享数据表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Share extends TableImpl<ShareRecord> {

    private static final long serialVersionUID = -473761426;

    /**
     * The reference instance of <code>cloud_disk.share</code>
     */
    public static final Share SHARE = new Share();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShareRecord> getRecordType() {
        return ShareRecord.class;
    }

    /**
     * The column <code>cloud_disk.share.id</code>.
     */
    public final TableField<ShareRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cloud_disk.share.title</code>. 分享标题
     */
    public final TableField<ShareRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "分享标题");

    /**
     * The column <code>cloud_disk.share.share_hash</code>. shareid
     */
    public final TableField<ShareRecord, String> SHARE_HASH = createField(DSL.name("share_hash"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "shareid");

    /**
     * The column <code>cloud_disk.share.user_id</code>. 分享用户id
     */
    public final TableField<ShareRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "分享用户id");

    /**
     * The column <code>cloud_disk.share.source_id</code>. 用户数据id
     */
    public final TableField<ShareRecord, Long> SOURCE_ID = createField(DSL.name("source_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户数据id");

    /**
     * The column <code>cloud_disk.share.source_path</code>. 分享文档路径
     */
    public final TableField<ShareRecord, String> SOURCE_PATH = createField(DSL.name("source_path"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "分享文档路径");

    /**
     * The column <code>cloud_disk.share.url</code>. 分享别名,替代shareHash
     */
    public final TableField<ShareRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "分享别名,替代shareHash");

    /**
     * The column <code>cloud_disk.share.is_link</code>. 是否外链分享；默认为0
     */
    public final TableField<ShareRecord, Integer> IS_LINK = createField(DSL.name("is_link"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "是否外链分享；默认为0");

    /**
     * The column <code>cloud_disk.share.status</code>. 状态 1 正常 3 禁止分享 4 取消分享
     */
    public final TableField<ShareRecord, Integer> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "状态 1 正常 3 禁止分享 4 取消分享");

    /**
     * The column <code>cloud_disk.share.is_share_to</code>. 是否为内部分享；默认为0
     */
    public final TableField<ShareRecord, Integer> IS_SHARE_TO = createField(DSL.name("is_share_to"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "是否为内部分享；默认为0");

    /**
     * The column <code>cloud_disk.share.password</code>. 访问密码,为空则无密码
     */
    public final TableField<ShareRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "访问密码,为空则无密码");

    /**
     * The column <code>cloud_disk.share.time_to</code>.
     */
    public final TableField<ShareRecord, Long> TIME_TO = createField(DSL.name("time_to"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cloud_disk.share.num_view</code>. 预览次数
     */
    public final TableField<ShareRecord, Integer> NUM_VIEW = createField(DSL.name("num_view"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "预览次数");

    /**
     * The column <code>cloud_disk.share.num_download</code>. 下载次数
     */
    public final TableField<ShareRecord, Integer> NUM_DOWNLOAD = createField(DSL.name("num_download"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "下载次数");

    /**
     * The column <code>cloud_disk.share.options</code>. json 配置信息;是否可以下载,是否可以上传等
     */
    public final TableField<ShareRecord, String> OPTIONS = createField(DSL.name("options"), org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false), this, "json 配置信息;是否可以下载,是否可以上传等");

    /**
     * The column <code>cloud_disk.share.create_time</code>. 创建时间
     */
    public final TableField<ShareRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>cloud_disk.share.modify_time</code>. 最后修改时间
     */
    public final TableField<ShareRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "最后修改时间");

    /**
     * The column <code>cloud_disk.share.tenant_id</code>. 租户id
     */
    public final TableField<ShareRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), org.jooq.impl.SQLDataType.BIGINT, this, "租户id");

    /**
     * Create a <code>cloud_disk.share</code> table reference
     */
    public Share() {
        this(DSL.name("share"), null);
    }

    /**
     * Create an aliased <code>cloud_disk.share</code> table reference
     */
    public Share(String alias) {
        this(DSL.name(alias), SHARE);
    }

    /**
     * Create an aliased <code>cloud_disk.share</code> table reference
     */
    public Share(Name alias) {
        this(alias, SHARE);
    }

    private Share(Name alias, Table<ShareRecord> aliased) {
        this(alias, aliased, null);
    }

    private Share(Name alias, Table<ShareRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("分享数据表"));
    }

    public <O extends Record> Share(Table<O> child, ForeignKey<O, ShareRecord> key) {
        super(child, key, SHARE);
    }

    @Override
    public Schema getSchema() {
        return CloudDisk.CLOUD_DISK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SHARE_PRIMARY, Indexes.SHARE_SHARE_ISLINK, Indexes.SHARE_SHARE_PATH, Indexes.SHARE_SHARE_SID, Indexes.SHARE_SHARE_URL);
    }

    @Override
    public Identity<ShareRecord, Long> getIdentity() {
        return Keys.IDENTITY_SHARE;
    }

    @Override
    public UniqueKey<ShareRecord> getPrimaryKey() {
        return Keys.KEY_SHARE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ShareRecord>> getKeys() {
        return Arrays.<UniqueKey<ShareRecord>>asList(Keys.KEY_SHARE_PRIMARY);
    }

    @Override
    public Share as(String alias) {
        return new Share(DSL.name(alias), this);
    }

    @Override
    public Share as(Name alias) {
        return new Share(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Share rename(String name) {
        return new Share(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Share rename(Name name) {
        return new Share(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Long, String, String, Long, Long, String, String, Integer, Integer, Integer, String, Long, Integer, Integer, String, LocalDateTime, LocalDateTime, Long> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}

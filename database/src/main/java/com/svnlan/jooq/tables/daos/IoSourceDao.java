/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables.daos;


import com.svnlan.jooq.tables.IoSource;
import com.svnlan.jooq.tables.pojos.IoSourceModel;
import com.svnlan.jooq.tables.records.IoSourceRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 文档数据表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IoSourceDao extends DAOImpl<IoSourceRecord, IoSourceModel, Long> {

    /**
     * Create a new IoSourceDao without any configuration
     */
    public IoSourceDao() {
        super(IoSource.IO_SOURCE, IoSourceModel.class);
    }

    /**
     * Create a new IoSourceDao with an attached configuration
     */
    public IoSourceDao(Configuration configuration) {
        super(IoSource.IO_SOURCE, IoSourceModel.class, configuration);
    }

    @Override
    public Long getId(IoSourceModel object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<IoSourceModel> fetchById(Long... values) {
        return fetch(IoSource.IO_SOURCE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public IoSourceModel fetchOneById(Long value) {
        return fetchOne(IoSource.IO_SOURCE.ID, value);
    }

    /**
     * Fetch records that have <code>source_hash BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfSourceHash(String lowerInclusive, String upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.SOURCE_HASH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>source_hash IN (values)</code>
     */
    public List<IoSourceModel> fetchBySourceHash(String... values) {
        return fetch(IoSource.IO_SOURCE.SOURCE_HASH, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfType(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<IoSourceModel> fetchByType(Integer... values) {
        return fetch(IoSource.IO_SOURCE.TYPE, values);
    }

    /**
     * Fetch records that have <code>target_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfTargetType(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.TARGET_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>target_type IN (values)</code>
     */
    public List<IoSourceModel> fetchByTargetType(Integer... values) {
        return fetch(IoSource.IO_SOURCE.TARGET_TYPE, values);
    }

    /**
     * Fetch records that have <code>target_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfTargetId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.TARGET_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>target_id IN (values)</code>
     */
    public List<IoSourceModel> fetchByTargetId(Long... values) {
        return fetch(IoSource.IO_SOURCE.TARGET_ID, values);
    }

    /**
     * Fetch records that have <code>create_user BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfCreateUser(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.CREATE_USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_user IN (values)</code>
     */
    public List<IoSourceModel> fetchByCreateUser(Long... values) {
        return fetch(IoSource.IO_SOURCE.CREATE_USER, values);
    }

    /**
     * Fetch records that have <code>modify_user BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfModifyUser(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.MODIFY_USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_user IN (values)</code>
     */
    public List<IoSourceModel> fetchByModifyUser(Long... values) {
        return fetch(IoSource.IO_SOURCE.MODIFY_USER, values);
    }

    /**
     * Fetch records that have <code>is_folder BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfIsFolder(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.IS_FOLDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_folder IN (values)</code>
     */
    public List<IoSourceModel> fetchByIsFolder(Integer... values) {
        return fetch(IoSource.IO_SOURCE.IS_FOLDER, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<IoSourceModel> fetchByName(String... values) {
        return fetch(IoSource.IO_SOURCE.NAME, values);
    }

    /**
     * Fetch records that have <code>file_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfFileType(String lowerInclusive, String upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.FILE_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>file_type IN (values)</code>
     */
    public List<IoSourceModel> fetchByFileType(String... values) {
        return fetch(IoSource.IO_SOURCE.FILE_TYPE, values);
    }

    /**
     * Fetch records that have <code>parent_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfParentId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.PARENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parent_id IN (values)</code>
     */
    public List<IoSourceModel> fetchByParentId(Long... values) {
        return fetch(IoSource.IO_SOURCE.PARENT_ID, values);
    }

    /**
     * Fetch records that have <code>parent_level BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfParentLevel(String lowerInclusive, String upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.PARENT_LEVEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parent_level IN (values)</code>
     */
    public List<IoSourceModel> fetchByParentLevel(String... values) {
        return fetch(IoSource.IO_SOURCE.PARENT_LEVEL, values);
    }

    /**
     * Fetch records that have <code>file_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfFileId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.FILE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>file_id IN (values)</code>
     */
    public List<IoSourceModel> fetchByFileId(Long... values) {
        return fetch(IoSource.IO_SOURCE.FILE_ID, values);
    }

    /**
     * Fetch records that have <code>is_delete BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfIsDelete(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.IS_DELETE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_delete IN (values)</code>
     */
    public List<IoSourceModel> fetchByIsDelete(Integer... values) {
        return fetch(IoSource.IO_SOURCE.IS_DELETE, values);
    }

    /**
     * Fetch records that have <code>size BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfSize(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.SIZE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>size IN (values)</code>
     */
    public List<IoSourceModel> fetchBySize(Long... values) {
        return fetch(IoSource.IO_SOURCE.SIZE, values);
    }

    /**
     * Fetch records that have <code>sort BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfSort(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.SORT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sort IN (values)</code>
     */
    public List<IoSourceModel> fetchBySort(Integer... values) {
        return fetch(IoSource.IO_SOURCE.SORT, values);
    }

    /**
     * Fetch records that have <code>can_share BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfCanShare(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.CAN_SHARE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>can_share IN (values)</code>
     */
    public List<IoSourceModel> fetchByCanShare(Integer... values) {
        return fetch(IoSource.IO_SOURCE.CAN_SHARE, values);
    }

    /**
     * Fetch records that have <code>convert_size BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfConvertSize(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.CONVERT_SIZE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>convert_size IN (values)</code>
     */
    public List<IoSourceModel> fetchByConvertSize(Long... values) {
        return fetch(IoSource.IO_SOURCE.CONVERT_SIZE, values);
    }

    /**
     * Fetch records that have <code>thumb_size BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfThumbSize(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.THUMB_SIZE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>thumb_size IN (values)</code>
     */
    public List<IoSourceModel> fetchByThumbSize(Long... values) {
        return fetch(IoSource.IO_SOURCE.THUMB_SIZE, values);
    }

    /**
     * Fetch records that have <code>storage_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfStorageId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.STORAGE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>storage_id IN (values)</code>
     */
    public List<IoSourceModel> fetchByStorageId(Integer... values) {
        return fetch(IoSource.IO_SOURCE.STORAGE_ID, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<IoSourceModel> fetchByCreateTime(LocalDateTime... values) {
        return fetch(IoSource.IO_SOURCE.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>modify_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfModifyTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.MODIFY_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_time IN (values)</code>
     */
    public List<IoSourceModel> fetchByModifyTime(LocalDateTime... values) {
        return fetch(IoSource.IO_SOURCE.MODIFY_TIME, values);
    }

    /**
     * Fetch records that have <code>view_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfViewTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.VIEW_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>view_time IN (values)</code>
     */
    public List<IoSourceModel> fetchByViewTime(LocalDateTime... values) {
        return fetch(IoSource.IO_SOURCE.VIEW_TIME, values);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfTenantId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<IoSourceModel> fetchByTenantId(Long... values) {
        return fetch(IoSource.IO_SOURCE.TENANT_ID, values);
    }

    /**
     * Fetch records that have <code>name_pinyin BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfNamePinyin(String lowerInclusive, String upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.NAME_PINYIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name_pinyin IN (values)</code>
     */
    public List<IoSourceModel> fetchByNamePinyin(String... values) {
        return fetch(IoSource.IO_SOURCE.NAME_PINYIN, values);
    }

    /**
     * Fetch records that have <code>name_pinyin_simple BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfNamePinyinSimple(String lowerInclusive, String upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.NAME_PINYIN_SIMPLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name_pinyin_simple IN (values)</code>
     */
    public List<IoSourceModel> fetchByNamePinyinSimple(String... values) {
        return fetch(IoSource.IO_SOURCE.NAME_PINYIN_SIMPLE, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceModel> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(IoSource.IO_SOURCE.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<IoSourceModel> fetchByDescription(String... values) {
        return fetch(IoSource.IO_SOURCE.DESCRIPTION, values);
    }
}

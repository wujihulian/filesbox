/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables;


import com.svnlan.jooq.CloudDisk;
import com.svnlan.jooq.Indexes;
import com.svnlan.jooq.Keys;
import com.svnlan.jooq.tables.records.CommentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 通用评论表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comment extends TableImpl<CommentRecord> {

    private static final long serialVersionUID = -1480328927;

    /**
     * The reference instance of <code>cloud_disk.comment</code>
     */
    public static final Comment COMMENT = new Comment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentRecord> getRecordType() {
        return CommentRecord.class;
    }

    /**
     * The column <code>cloud_disk.comment.id</code>.
     */
    public final TableField<CommentRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cloud_disk.comment.pid</code>. 该评论上级ID
     */
    public final TableField<CommentRecord, Long> PID = createField(DSL.name("pid"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "该评论上级ID");

    /**
     * The column <code>cloud_disk.comment.user_id</code>. 评论用户id
     */
    public final TableField<CommentRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "评论用户id");

    /**
     * The column <code>cloud_disk.comment.target_type</code>. 评论对象类型1分享2文件3文章4......
     */
    public final TableField<CommentRecord, Integer> TARGET_TYPE = createField(DSL.name("target_type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "评论对象类型1分享2文件3文章4......");

    /**
     * The column <code>cloud_disk.comment.target_id</code>. 评论对象id
     */
    public final TableField<CommentRecord, Long> TARGET_ID = createField(DSL.name("target_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "评论对象id");

    /**
     * The column <code>cloud_disk.comment.content</code>. 评论内容
     */
    public final TableField<CommentRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "评论内容");

    /**
     * The column <code>cloud_disk.comment.praise_count</code>. 点赞统计
     */
    public final TableField<CommentRecord, Integer> PRAISE_COUNT = createField(DSL.name("praise_count"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "点赞统计");

    /**
     * The column <code>cloud_disk.comment.comment_count</code>. 评论统计
     */
    public final TableField<CommentRecord, Integer> COMMENT_COUNT = createField(DSL.name("comment_count"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "评论统计");

    /**
     * The column <code>cloud_disk.comment.status</code>. 状态 1正常 2异常 3其他
     */
    public final TableField<CommentRecord, Integer> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "状态 1正常 2异常 3其他");

    /**
     * The column <code>cloud_disk.comment.modify_time</code>. 最后修改时间
     */
    public final TableField<CommentRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "最后修改时间");

    /**
     * The column <code>cloud_disk.comment.create_time</code>. 创建时间
     */
    public final TableField<CommentRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>cloud_disk.comment.tenant_id</code>. 租户id
     */
    public final TableField<CommentRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), org.jooq.impl.SQLDataType.BIGINT, this, "租户id");

    /**
     * Create a <code>cloud_disk.comment</code> table reference
     */
    public Comment() {
        this(DSL.name("comment"), null);
    }

    /**
     * Create an aliased <code>cloud_disk.comment</code> table reference
     */
    public Comment(String alias) {
        this(DSL.name(alias), COMMENT);
    }

    /**
     * Create an aliased <code>cloud_disk.comment</code> table reference
     */
    public Comment(Name alias) {
        this(alias, COMMENT);
    }

    private Comment(Name alias, Table<CommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Comment(Name alias, Table<CommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("通用评论表"));
    }

    public <O extends Record> Comment(Table<O> child, ForeignKey<O, CommentRecord> key) {
        super(child, key, COMMENT);
    }

    @Override
    public Schema getSchema() {
        return CloudDisk.CLOUD_DISK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMMENT_PID, Indexes.COMMENT_PRIMARY);
    }

    @Override
    public Identity<CommentRecord, Long> getIdentity() {
        return Keys.IDENTITY_COMMENT;
    }

    @Override
    public UniqueKey<CommentRecord> getPrimaryKey() {
        return Keys.KEY_COMMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<CommentRecord>> getKeys() {
        return Arrays.<UniqueKey<CommentRecord>>asList(Keys.KEY_COMMENT_PRIMARY);
    }

    @Override
    public Comment as(String alias) {
        return new Comment(DSL.name(alias), this);
    }

    @Override
    public Comment as(Name alias) {
        return new Comment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(String name) {
        return new Comment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(Name name) {
        return new Comment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, Long, Integer, Long, String, Integer, Integer, Integer, LocalDateTime, LocalDateTime, Long> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}

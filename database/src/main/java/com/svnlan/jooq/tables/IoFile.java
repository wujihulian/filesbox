/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables;


import com.svnlan.jooq.CloudDisk;
import com.svnlan.jooq.Indexes;
import com.svnlan.jooq.Keys;
import com.svnlan.jooq.tables.records.IoFileRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 文档存储表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IoFile extends TableImpl<IoFileRecord> {

    private static final long serialVersionUID = 1620331572;

    /**
     * The reference instance of <code>cloud_disk.io_file</code>
     */
    public static final IoFile IO_FILE = new IoFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IoFileRecord> getRecordType() {
        return IoFileRecord.class;
    }

    /**
     * The column <code>cloud_disk.io_file.id</code>.
     */
    public final TableField<IoFileRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cloud_disk.io_file.name</code>. 文件名
     */
    public final TableField<IoFileRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "文件名");

    /**
     * The column <code>cloud_disk.io_file.size</code>. 文件大小
     */
    public final TableField<IoFileRecord, Long> SIZE = createField(DSL.name("size"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "文件大小");

    /**
     * The column <code>cloud_disk.io_file.io_type</code>. io的id
     */
    public final TableField<IoFileRecord, Long> IO_TYPE = createField(DSL.name("io_type"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "io的id");

    /**
     * The column <code>cloud_disk.io_file.path</code>. 文件路径
     */
    public final TableField<IoFileRecord, String> PATH = createField(DSL.name("path"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "文件路径");

    /**
     * The column <code>cloud_disk.io_file.hash_simple</code>. 文件简易hash(不全覆盖)；hashSimple
     */
    public final TableField<IoFileRecord, String> HASH_SIMPLE = createField(DSL.name("hash_simple"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "文件简易hash(不全覆盖)；hashSimple");

    /**
     * The column <code>cloud_disk.io_file.hash_md5</code>. 文件hash, md5
     */
    public final TableField<IoFileRecord, String> HASH_MD5 = createField(DSL.name("hash_md5"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "文件hash, md5");

    /**
     * The column <code>cloud_disk.io_file.link_count</code>. 引用次数;0则定期删除
     */
    public final TableField<IoFileRecord, Integer> LINK_COUNT = createField(DSL.name("link_count"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "引用次数;0则定期删除");

    /**
     * The column <code>cloud_disk.io_file.is_preview</code>. 是否支持预览,0否，1是
     */
    public final TableField<IoFileRecord, Integer> IS_PREVIEW = createField(DSL.name("is_preview"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "是否支持预览,0否，1是");

    /**
     * The column <code>cloud_disk.io_file.app_preview</code>. 是否支持APP上的文档预览，主要指doc转成pdf后的html5预览
     */
    public final TableField<IoFileRecord, Integer> APP_PREVIEW = createField(DSL.name("app_preview"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "是否支持APP上的文档预览，主要指doc转成pdf后的html5预览");

    /**
     * The column <code>cloud_disk.io_file.is_h264_preview</code>. 视频转h264是否成功, 0未成功,1成功,2失败
     */
    public final TableField<IoFileRecord, Integer> IS_H264_PREVIEW = createField(DSL.name("is_h264_preview"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "视频转h264是否成功, 0未成功,1成功,2失败");

    /**
     * The column <code>cloud_disk.io_file.is_m3u8</code>. 源文件为视频类型时,表示是否已经切片处理成m3u8格式,0否1是;文档类型(doc,ppt等)时,表示是否转成flash,0否1是
     */
    public final TableField<IoFileRecord, Integer> IS_M3U8 = createField(DSL.name("is_m3u8"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "源文件为视频类型时,表示是否已经切片处理成m3u8格式,0否1是;文档类型(doc,ppt等)时,表示是否转成flash,0否1是");

    /**
     * The column <code>cloud_disk.io_file.is_exist_file</code>. 原始文件是否存在 0 否 1 是
     */
    public final TableField<IoFileRecord, Integer> IS_EXIST_FILE = createField(DSL.name("is_exist_file"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "原始文件是否存在 0 否 1 是");

    /**
     * The column <code>cloud_disk.io_file.file_name</code>. 文件名
     */
    public final TableField<IoFileRecord, String> FILE_NAME = createField(DSL.name("file_name"), org.jooq.impl.SQLDataType.VARCHAR(125).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "文件名");

    /**
     * The column <code>cloud_disk.io_file.convert_size</code>. 转码文件占用空间大小
     */
    public final TableField<IoFileRecord, Long> CONVERT_SIZE = createField(DSL.name("convert_size"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "转码文件占用空间大小");

    /**
     * The column <code>cloud_disk.io_file.thumb_size</code>. 缩略图占用空间
     */
    public final TableField<IoFileRecord, Long> THUMB_SIZE = createField(DSL.name("thumb_size"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "缩略图占用空间");

    /**
     * The column <code>cloud_disk.io_file.create_time</code>. 创建时间
     */
    public final TableField<IoFileRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>cloud_disk.io_file.modify_time</code>. 最后修改时间
     */
    public final TableField<IoFileRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "最后修改时间");

    /**
     * The column <code>cloud_disk.io_file.tenant_id</code>. 租户id
     */
    public final TableField<IoFileRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), org.jooq.impl.SQLDataType.BIGINT, this, "租户id");

    /**
     * The column <code>cloud_disk.io_file.user_id</code>. 创建人id
     */
    public final TableField<IoFileRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "创建人id");

    /**
     * Create a <code>cloud_disk.io_file</code> table reference
     */
    public IoFile() {
        this(DSL.name("io_file"), null);
    }

    /**
     * Create an aliased <code>cloud_disk.io_file</code> table reference
     */
    public IoFile(String alias) {
        this(DSL.name(alias), IO_FILE);
    }

    /**
     * Create an aliased <code>cloud_disk.io_file</code> table reference
     */
    public IoFile(Name alias) {
        this(alias, IO_FILE);
    }

    private IoFile(Name alias, Table<IoFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private IoFile(Name alias, Table<IoFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("文档存储表"));
    }

    public <O extends Record> IoFile(Table<O> child, ForeignKey<O, IoFileRecord> key) {
        super(child, key, IO_FILE);
    }

    @Override
    public Schema getSchema() {
        return CloudDisk.CLOUD_DISK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IO_FILE_IO_FILE_HASH, Indexes.IO_FILE_IO_FILE_NAME, Indexes.IO_FILE_IO_FILE_PATH, Indexes.IO_FILE_IO_FILE_SIZE, Indexes.IO_FILE_PRIMARY);
    }

    @Override
    public Identity<IoFileRecord, Long> getIdentity() {
        return Keys.IDENTITY_IO_FILE;
    }

    @Override
    public UniqueKey<IoFileRecord> getPrimaryKey() {
        return Keys.KEY_IO_FILE_PRIMARY;
    }

    @Override
    public List<UniqueKey<IoFileRecord>> getKeys() {
        return Arrays.<UniqueKey<IoFileRecord>>asList(Keys.KEY_IO_FILE_PRIMARY);
    }

    @Override
    public IoFile as(String alias) {
        return new IoFile(DSL.name(alias), this);
    }

    @Override
    public IoFile as(Name alias) {
        return new IoFile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IoFile rename(String name) {
        return new IoFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IoFile rename(Name name) {
        return new IoFile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Long, String, Long, Long, String, String, String, Integer, Integer, Integer, Integer, Integer, Integer, String, Long, Long, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}

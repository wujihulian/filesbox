/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables.daos;


import com.svnlan.jooq.tables.CommonInfoType;
import com.svnlan.jooq.tables.pojos.CommonInfoTypeModel;
import com.svnlan.jooq.tables.records.CommonInfoTypeRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 资讯类型表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommonInfoTypeDao extends DAOImpl<CommonInfoTypeRecord, CommonInfoTypeModel, Integer> {

    /**
     * Create a new CommonInfoTypeDao without any configuration
     */
    public CommonInfoTypeDao() {
        super(CommonInfoType.COMMON_INFO_TYPE, CommonInfoTypeModel.class);
    }

    /**
     * Create a new CommonInfoTypeDao with an attached configuration
     */
    public CommonInfoTypeDao(Configuration configuration) {
        super(CommonInfoType.COMMON_INFO_TYPE, CommonInfoTypeModel.class, configuration);
    }

    @Override
    public Integer getId(CommonInfoTypeModel object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoTypeModel> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfoType.COMMON_INFO_TYPE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<CommonInfoTypeModel> fetchById(Integer... values) {
        return fetch(CommonInfoType.COMMON_INFO_TYPE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public CommonInfoTypeModel fetchOneById(Integer value) {
        return fetchOne(CommonInfoType.COMMON_INFO_TYPE.ID, value);
    }

    /**
     * Fetch records that have <code>type_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoTypeModel> fetchRangeOfTypeName(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfoType.COMMON_INFO_TYPE.TYPE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type_name IN (values)</code>
     */
    public List<CommonInfoTypeModel> fetchByTypeName(String... values) {
        return fetch(CommonInfoType.COMMON_INFO_TYPE.TYPE_NAME, values);
    }

    /**
     * Fetch records that have <code>parent_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoTypeModel> fetchRangeOfParentId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfoType.COMMON_INFO_TYPE.PARENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parent_id IN (values)</code>
     */
    public List<CommonInfoTypeModel> fetchByParentId(Integer... values) {
        return fetch(CommonInfoType.COMMON_INFO_TYPE.PARENT_ID, values);
    }

    /**
     * Fetch records that have <code>parent_level BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoTypeModel> fetchRangeOfParentLevel(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfoType.COMMON_INFO_TYPE.PARENT_LEVEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parent_level IN (values)</code>
     */
    public List<CommonInfoTypeModel> fetchByParentLevel(String... values) {
        return fetch(CommonInfoType.COMMON_INFO_TYPE.PARENT_LEVEL, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoTypeModel> fetchRangeOfStatus(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfoType.COMMON_INFO_TYPE.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<CommonInfoTypeModel> fetchByStatus(Integer... values) {
        return fetch(CommonInfoType.COMMON_INFO_TYPE.STATUS, values);
    }

    /**
     * Fetch records that have <code>sort BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoTypeModel> fetchRangeOfSort(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfoType.COMMON_INFO_TYPE.SORT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sort IN (values)</code>
     */
    public List<CommonInfoTypeModel> fetchBySort(Integer... values) {
        return fetch(CommonInfoType.COMMON_INFO_TYPE.SORT, values);
    }

    /**
     * Fetch records that have <code>name_pinyin BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoTypeModel> fetchRangeOfNamePinyin(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfoType.COMMON_INFO_TYPE.NAME_PINYIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name_pinyin IN (values)</code>
     */
    public List<CommonInfoTypeModel> fetchByNamePinyin(String... values) {
        return fetch(CommonInfoType.COMMON_INFO_TYPE.NAME_PINYIN, values);
    }

    /**
     * Fetch records that have <code>name_pinyin_simple BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoTypeModel> fetchRangeOfNamePinyinSimple(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfoType.COMMON_INFO_TYPE.NAME_PINYIN_SIMPLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name_pinyin_simple IN (values)</code>
     */
    public List<CommonInfoTypeModel> fetchByNamePinyinSimple(String... values) {
        return fetch(CommonInfoType.COMMON_INFO_TYPE.NAME_PINYIN_SIMPLE, values);
    }

    /**
     * Fetch records that have <code>create_user BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoTypeModel> fetchRangeOfCreateUser(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CommonInfoType.COMMON_INFO_TYPE.CREATE_USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_user IN (values)</code>
     */
    public List<CommonInfoTypeModel> fetchByCreateUser(Long... values) {
        return fetch(CommonInfoType.COMMON_INFO_TYPE.CREATE_USER, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoTypeModel> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(CommonInfoType.COMMON_INFO_TYPE.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<CommonInfoTypeModel> fetchByCreateTime(LocalDateTime... values) {
        return fetch(CommonInfoType.COMMON_INFO_TYPE.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>modify_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoTypeModel> fetchRangeOfModifyTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(CommonInfoType.COMMON_INFO_TYPE.MODIFY_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_time IN (values)</code>
     */
    public List<CommonInfoTypeModel> fetchByModifyTime(LocalDateTime... values) {
        return fetch(CommonInfoType.COMMON_INFO_TYPE.MODIFY_TIME, values);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoTypeModel> fetchRangeOfTenantId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CommonInfoType.COMMON_INFO_TYPE.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<CommonInfoTypeModel> fetchByTenantId(Long... values) {
        return fetch(CommonInfoType.COMMON_INFO_TYPE.TENANT_ID, values);
    }
}

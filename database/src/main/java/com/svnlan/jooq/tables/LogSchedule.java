/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables;


import com.svnlan.jooq.CloudDisk;
import com.svnlan.jooq.Indexes;
import com.svnlan.jooq.Keys;
import com.svnlan.jooq.tables.records.LogScheduleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 任务执行记录表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogSchedule extends TableImpl<LogScheduleRecord> {

    private static final long serialVersionUID = 1394955035;

    /**
     * The reference instance of <code>cloud_disk.log_schedule</code>
     */
    public static final LogSchedule LOG_SCHEDULE = new LogSchedule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogScheduleRecord> getRecordType() {
        return LogScheduleRecord.class;
    }

    /**
     * The column <code>cloud_disk.log_schedule.id</code>.
     */
    public final TableField<LogScheduleRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cloud_disk.log_schedule.common_schedule_id</code>. 定时任务标识
     */
    public final TableField<LogScheduleRecord, String> COMMON_SCHEDULE_ID = createField(DSL.name("common_schedule_id"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "定时任务标识");

    /**
     * The column <code>cloud_disk.log_schedule.gmt_start</code>. 任务执行开始时间
     */
    public final TableField<LogScheduleRecord, LocalDateTime> GMT_START = createField(DSL.name("gmt_start"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "任务执行开始时间");

    /**
     * The column <code>cloud_disk.log_schedule.gmt_end</code>. 任务执行结束时间
     */
    public final TableField<LogScheduleRecord, LocalDateTime> GMT_END = createField(DSL.name("gmt_end"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "任务执行结束时间");

    /**
     * The column <code>cloud_disk.log_schedule.state</code>. 状态，0开始，1执行成功，2执行失败
     */
    public final TableField<LogScheduleRecord, String> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "状态，0开始，1执行成功，2执行失败");

    /**
     * The column <code>cloud_disk.log_schedule.remark</code>. 备注，如有执行异常，记录异常信息
     */
    public final TableField<LogScheduleRecord, String> REMARK = createField(DSL.name("remark"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "备注，如有执行异常，记录异常信息");

    /**
     * The column <code>cloud_disk.log_schedule.tenant_id</code>. 租户id
     */
    public final TableField<LogScheduleRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), org.jooq.impl.SQLDataType.BIGINT, this, "租户id");

    /**
     * Create a <code>cloud_disk.log_schedule</code> table reference
     */
    public LogSchedule() {
        this(DSL.name("log_schedule"), null);
    }

    /**
     * Create an aliased <code>cloud_disk.log_schedule</code> table reference
     */
    public LogSchedule(String alias) {
        this(DSL.name(alias), LOG_SCHEDULE);
    }

    /**
     * Create an aliased <code>cloud_disk.log_schedule</code> table reference
     */
    public LogSchedule(Name alias) {
        this(alias, LOG_SCHEDULE);
    }

    private LogSchedule(Name alias, Table<LogScheduleRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogSchedule(Name alias, Table<LogScheduleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("任务执行记录表"));
    }

    public <O extends Record> LogSchedule(Table<O> child, ForeignKey<O, LogScheduleRecord> key) {
        super(child, key, LOG_SCHEDULE);
    }

    @Override
    public Schema getSchema() {
        return CloudDisk.CLOUD_DISK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOG_SCHEDULE_PRIMARY);
    }

    @Override
    public Identity<LogScheduleRecord, Long> getIdentity() {
        return Keys.IDENTITY_LOG_SCHEDULE;
    }

    @Override
    public UniqueKey<LogScheduleRecord> getPrimaryKey() {
        return Keys.KEY_LOG_SCHEDULE_PRIMARY;
    }

    @Override
    public List<UniqueKey<LogScheduleRecord>> getKeys() {
        return Arrays.<UniqueKey<LogScheduleRecord>>asList(Keys.KEY_LOG_SCHEDULE_PRIMARY);
    }

    @Override
    public LogSchedule as(String alias) {
        return new LogSchedule(DSL.name(alias), this);
    }

    @Override
    public LogSchedule as(Name alias) {
        return new LogSchedule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogSchedule rename(String name) {
        return new LogSchedule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LogSchedule rename(Name name) {
        return new LogSchedule(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, LocalDateTime, LocalDateTime, String, String, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}

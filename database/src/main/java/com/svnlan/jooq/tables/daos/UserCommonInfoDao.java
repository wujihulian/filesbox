/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables.daos;


import com.svnlan.jooq.tables.UserCommonInfo;
import com.svnlan.jooq.tables.pojos.UserCommonInfoModel;
import com.svnlan.jooq.tables.records.UserCommonInfoRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 用户资讯表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserCommonInfoDao extends DAOImpl<UserCommonInfoRecord, UserCommonInfoModel, Long> {

    /**
     * Create a new UserCommonInfoDao without any configuration
     */
    public UserCommonInfoDao() {
        super(UserCommonInfo.USER_COMMON_INFO, UserCommonInfoModel.class);
    }

    /**
     * Create a new UserCommonInfoDao with an attached configuration
     */
    public UserCommonInfoDao(Configuration configuration) {
        super(UserCommonInfo.USER_COMMON_INFO, UserCommonInfoModel.class, configuration);
    }

    @Override
    public Long getId(UserCommonInfoModel object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserCommonInfoModel> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserCommonInfo.USER_COMMON_INFO.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UserCommonInfoModel> fetchById(Long... values) {
        return fetch(UserCommonInfo.USER_COMMON_INFO.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UserCommonInfoModel fetchOneById(Long value) {
        return fetchOne(UserCommonInfo.USER_COMMON_INFO.ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserCommonInfoModel> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserCommonInfo.USER_COMMON_INFO.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<UserCommonInfoModel> fetchByUserId(Long... values) {
        return fetch(UserCommonInfo.USER_COMMON_INFO.USER_ID, values);
    }

    /**
     * Fetch records that have <code>info_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserCommonInfoModel> fetchRangeOfInfoId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserCommonInfo.USER_COMMON_INFO.INFO_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>info_id IN (values)</code>
     */
    public List<UserCommonInfoModel> fetchByInfoId(Long... values) {
        return fetch(UserCommonInfo.USER_COMMON_INFO.INFO_ID, values);
    }

    /**
     * Fetch records that have <code>ip BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserCommonInfoModel> fetchRangeOfIp(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserCommonInfo.USER_COMMON_INFO.IP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ip IN (values)</code>
     */
    public List<UserCommonInfoModel> fetchByIp(String... values) {
        return fetch(UserCommonInfo.USER_COMMON_INFO.IP, values);
    }

    /**
     * Fetch records that have <code>view_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserCommonInfoModel> fetchRangeOfViewCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserCommonInfo.USER_COMMON_INFO.VIEW_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>view_count IN (values)</code>
     */
    public List<UserCommonInfoModel> fetchByViewCount(Integer... values) {
        return fetch(UserCommonInfo.USER_COMMON_INFO.VIEW_COUNT, values);
    }

    /**
     * Fetch records that have <code>is_like BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserCommonInfoModel> fetchRangeOfIsLike(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserCommonInfo.USER_COMMON_INFO.IS_LIKE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_like IN (values)</code>
     */
    public List<UserCommonInfoModel> fetchByIsLike(Integer... values) {
        return fetch(UserCommonInfo.USER_COMMON_INFO.IS_LIKE, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserCommonInfoModel> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserCommonInfo.USER_COMMON_INFO.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<UserCommonInfoModel> fetchByCreateTime(LocalDateTime... values) {
        return fetch(UserCommonInfo.USER_COMMON_INFO.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>modify_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserCommonInfoModel> fetchRangeOfModifyTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserCommonInfo.USER_COMMON_INFO.MODIFY_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_time IN (values)</code>
     */
    public List<UserCommonInfoModel> fetchByModifyTime(LocalDateTime... values) {
        return fetch(UserCommonInfo.USER_COMMON_INFO.MODIFY_TIME, values);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserCommonInfoModel> fetchRangeOfTenantId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserCommonInfo.USER_COMMON_INFO.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<UserCommonInfoModel> fetchByTenantId(Long... values) {
        return fetch(UserCommonInfo.USER_COMMON_INFO.TENANT_ID, values);
    }
}

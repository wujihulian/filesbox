/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables.daos;


import com.svnlan.jooq.tables.Groups;
import com.svnlan.jooq.tables.pojos.GroupsModel;
import com.svnlan.jooq.tables.records.GroupsRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 群组表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GroupsDao extends DAOImpl<GroupsRecord, GroupsModel, Long> {

    /**
     * Create a new GroupsDao without any configuration
     */
    public GroupsDao() {
        super(Groups.GROUPS, GroupsModel.class);
    }

    /**
     * Create a new GroupsDao with an attached configuration
     */
    public GroupsDao(Configuration configuration) {
        super(Groups.GROUPS, GroupsModel.class, configuration);
    }

    @Override
    public Long getId(GroupsModel object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<GroupsModel> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Groups.GROUPS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<GroupsModel> fetchById(Long... values) {
        return fetch(Groups.GROUPS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public GroupsModel fetchOneById(Long value) {
        return fetchOne(Groups.GROUPS.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<GroupsModel> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Groups.GROUPS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<GroupsModel> fetchByName(String... values) {
        return fetch(Groups.GROUPS.NAME, values);
    }

    /**
     * Fetch records that have <code>parent_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<GroupsModel> fetchRangeOfParentId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Groups.GROUPS.PARENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parent_id IN (values)</code>
     */
    public List<GroupsModel> fetchByParentId(Long... values) {
        return fetch(Groups.GROUPS.PARENT_ID, values);
    }

    /**
     * Fetch records that have <code>parent_level BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<GroupsModel> fetchRangeOfParentLevel(String lowerInclusive, String upperInclusive) {
        return fetchRange(Groups.GROUPS.PARENT_LEVEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parent_level IN (values)</code>
     */
    public List<GroupsModel> fetchByParentLevel(String... values) {
        return fetch(Groups.GROUPS.PARENT_LEVEL, values);
    }

    /**
     * Fetch records that have <code>extra_field BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<GroupsModel> fetchRangeOfExtraField(String lowerInclusive, String upperInclusive) {
        return fetchRange(Groups.GROUPS.EXTRA_FIELD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>extra_field IN (values)</code>
     */
    public List<GroupsModel> fetchByExtraField(String... values) {
        return fetch(Groups.GROUPS.EXTRA_FIELD, values);
    }

    /**
     * Fetch records that have <code>sort BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<GroupsModel> fetchRangeOfSort(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Groups.GROUPS.SORT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sort IN (values)</code>
     */
    public List<GroupsModel> fetchBySort(Integer... values) {
        return fetch(Groups.GROUPS.SORT, values);
    }

    /**
     * Fetch records that have <code>size_max BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<GroupsModel> fetchRangeOfSizeMax(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Groups.GROUPS.SIZE_MAX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>size_max IN (values)</code>
     */
    public List<GroupsModel> fetchBySizeMax(Double... values) {
        return fetch(Groups.GROUPS.SIZE_MAX, values);
    }

    /**
     * Fetch records that have <code>size_use BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<GroupsModel> fetchRangeOfSizeUse(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Groups.GROUPS.SIZE_USE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>size_use IN (values)</code>
     */
    public List<GroupsModel> fetchBySizeUse(Long... values) {
        return fetch(Groups.GROUPS.SIZE_USE, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<GroupsModel> fetchRangeOfStatus(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Groups.GROUPS.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<GroupsModel> fetchByStatus(Integer... values) {
        return fetch(Groups.GROUPS.STATUS, values);
    }

    /**
     * Fetch records that have <code>modify_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<GroupsModel> fetchRangeOfModifyTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Groups.GROUPS.MODIFY_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_time IN (values)</code>
     */
    public List<GroupsModel> fetchByModifyTime(LocalDateTime... values) {
        return fetch(Groups.GROUPS.MODIFY_TIME, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<GroupsModel> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Groups.GROUPS.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<GroupsModel> fetchByCreateTime(LocalDateTime... values) {
        return fetch(Groups.GROUPS.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<GroupsModel> fetchRangeOfTenantId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Groups.GROUPS.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<GroupsModel> fetchByTenantId(Long... values) {
        return fetch(Groups.GROUPS.TENANT_ID, values);
    }
}

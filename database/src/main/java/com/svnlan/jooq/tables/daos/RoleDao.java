/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables.daos;


import com.svnlan.jooq.tables.Role;
import com.svnlan.jooq.tables.pojos.RoleModel;
import com.svnlan.jooq.tables.records.RoleRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 角色表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoleDao extends DAOImpl<RoleRecord, RoleModel, Integer> {

    /**
     * Create a new RoleDao without any configuration
     */
    public RoleDao() {
        super(Role.ROLE, RoleModel.class);
    }

    /**
     * Create a new RoleDao with an attached configuration
     */
    public RoleDao(Configuration configuration) {
        super(Role.ROLE, RoleModel.class, configuration);
    }

    @Override
    public Integer getId(RoleModel object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Role.ROLE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<RoleModel> fetchById(Integer... values) {
        return fetch(Role.ROLE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public RoleModel fetchOneById(Integer value) {
        return fetchOne(Role.ROLE.ID, value);
    }

    /**
     * Fetch records that have <code>role_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfRoleName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Role.ROLE.ROLE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role_name IN (values)</code>
     */
    public List<RoleModel> fetchByRoleName(String... values) {
        return fetch(Role.ROLE.ROLE_NAME, values);
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Role.ROLE.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<RoleModel> fetchByCode(String... values) {
        return fetch(Role.ROLE.CODE, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Role.ROLE.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<RoleModel> fetchByDescription(String... values) {
        return fetch(Role.ROLE.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>label BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfLabel(String lowerInclusive, String upperInclusive) {
        return fetchRange(Role.ROLE.LABEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>label IN (values)</code>
     */
    public List<RoleModel> fetchByLabel(String... values) {
        return fetch(Role.ROLE.LABEL, values);
    }

    /**
     * Fetch records that have <code>auth BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfAuth(String lowerInclusive, String upperInclusive) {
        return fetchRange(Role.ROLE.AUTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auth IN (values)</code>
     */
    public List<RoleModel> fetchByAuth(String... values) {
        return fetch(Role.ROLE.AUTH, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfStatus(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Role.ROLE.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<RoleModel> fetchByStatus(Integer... values) {
        return fetch(Role.ROLE.STATUS, values);
    }

    /**
     * Fetch records that have <code>enable BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfEnable(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Role.ROLE.ENABLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enable IN (values)</code>
     */
    public List<RoleModel> fetchByEnable(Integer... values) {
        return fetch(Role.ROLE.ENABLE, values);
    }

    /**
     * Fetch records that have <code>is_system BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfIsSystem(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Role.ROLE.IS_SYSTEM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_system IN (values)</code>
     */
    public List<RoleModel> fetchByIsSystem(Integer... values) {
        return fetch(Role.ROLE.IS_SYSTEM, values);
    }

    /**
     * Fetch records that have <code>administrator BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfAdministrator(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Role.ROLE.ADMINISTRATOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>administrator IN (values)</code>
     */
    public List<RoleModel> fetchByAdministrator(Integer... values) {
        return fetch(Role.ROLE.ADMINISTRATOR, values);
    }

    /**
     * Fetch records that have <code>ignore_file_size BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfIgnoreFileSize(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Role.ROLE.IGNORE_FILE_SIZE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ignore_file_size IN (values)</code>
     */
    public List<RoleModel> fetchByIgnoreFileSize(Double... values) {
        return fetch(Role.ROLE.IGNORE_FILE_SIZE, values);
    }

    /**
     * Fetch records that have <code>ignore_ext BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfIgnoreExt(String lowerInclusive, String upperInclusive) {
        return fetchRange(Role.ROLE.IGNORE_EXT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ignore_ext IN (values)</code>
     */
    public List<RoleModel> fetchByIgnoreExt(String... values) {
        return fetch(Role.ROLE.IGNORE_EXT, values);
    }

    /**
     * Fetch records that have <code>sort BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfSort(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Role.ROLE.SORT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sort IN (values)</code>
     */
    public List<RoleModel> fetchBySort(Integer... values) {
        return fetch(Role.ROLE.SORT, values);
    }

    /**
     * Fetch records that have <code>role_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfRoleType(String lowerInclusive, String upperInclusive) {
        return fetchRange(Role.ROLE.ROLE_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role_type IN (values)</code>
     */
    public List<RoleModel> fetchByRoleType(String... values) {
        return fetch(Role.ROLE.ROLE_TYPE, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Role.ROLE.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<RoleModel> fetchByCreateTime(LocalDateTime... values) {
        return fetch(Role.ROLE.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>modify_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfModifyTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Role.ROLE.MODIFY_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_time IN (values)</code>
     */
    public List<RoleModel> fetchByModifyTime(LocalDateTime... values) {
        return fetch(Role.ROLE.MODIFY_TIME, values);
    }

    /**
     * Fetch records that have <code>delete_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfDeleteTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Role.ROLE.DELETE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_time IN (values)</code>
     */
    public List<RoleModel> fetchByDeleteTime(LocalDateTime... values) {
        return fetch(Role.ROLE.DELETE_TIME, values);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RoleModel> fetchRangeOfTenantId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Role.ROLE.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<RoleModel> fetchByTenantId(Long... values) {
        return fetch(Role.ROLE.TENANT_ID, values);
    }
}

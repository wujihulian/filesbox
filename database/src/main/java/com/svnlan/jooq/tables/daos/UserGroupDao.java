/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables.daos;


import com.svnlan.jooq.tables.UserGroup;
import com.svnlan.jooq.tables.pojos.UserGroupModel;
import com.svnlan.jooq.tables.records.UserGroupRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 用户群组关联表(一对多)
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserGroupDao extends DAOImpl<UserGroupRecord, UserGroupModel, Long> {

    /**
     * Create a new UserGroupDao without any configuration
     */
    public UserGroupDao() {
        super(UserGroup.USER_GROUP, UserGroupModel.class);
    }

    /**
     * Create a new UserGroupDao with an attached configuration
     */
    public UserGroupDao(Configuration configuration) {
        super(UserGroup.USER_GROUP, UserGroupModel.class, configuration);
    }

    @Override
    public Long getId(UserGroupModel object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserGroupModel> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserGroup.USER_GROUP.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UserGroupModel> fetchById(Long... values) {
        return fetch(UserGroup.USER_GROUP.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UserGroupModel fetchOneById(Long value) {
        return fetchOne(UserGroup.USER_GROUP.ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserGroupModel> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserGroup.USER_GROUP.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<UserGroupModel> fetchByUserId(Long... values) {
        return fetch(UserGroup.USER_GROUP.USER_ID, values);
    }

    /**
     * Fetch records that have <code>group_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserGroupModel> fetchRangeOfGroupId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserGroup.USER_GROUP.GROUP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>group_id IN (values)</code>
     */
    public List<UserGroupModel> fetchByGroupId(Long... values) {
        return fetch(UserGroup.USER_GROUP.GROUP_ID, values);
    }

    /**
     * Fetch records that have <code>auth_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserGroupModel> fetchRangeOfAuthId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserGroup.USER_GROUP.AUTH_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auth_id IN (values)</code>
     */
    public List<UserGroupModel> fetchByAuthId(Integer... values) {
        return fetch(UserGroup.USER_GROUP.AUTH_ID, values);
    }

    /**
     * Fetch records that have <code>sort BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserGroupModel> fetchRangeOfSort(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserGroup.USER_GROUP.SORT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sort IN (values)</code>
     */
    public List<UserGroupModel> fetchBySort(Integer... values) {
        return fetch(UserGroup.USER_GROUP.SORT, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserGroupModel> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserGroup.USER_GROUP.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<UserGroupModel> fetchByCreateTime(LocalDateTime... values) {
        return fetch(UserGroup.USER_GROUP.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>modify_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserGroupModel> fetchRangeOfModifyTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserGroup.USER_GROUP.MODIFY_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_time IN (values)</code>
     */
    public List<UserGroupModel> fetchByModifyTime(LocalDateTime... values) {
        return fetch(UserGroup.USER_GROUP.MODIFY_TIME, values);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserGroupModel> fetchRangeOfTenantId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserGroup.USER_GROUP.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<UserGroupModel> fetchByTenantId(Long... values) {
        return fetch(UserGroup.USER_GROUP.TENANT_ID, values);
    }
}

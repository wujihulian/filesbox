/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables;


import com.svnlan.jooq.CloudDisk;
import com.svnlan.jooq.Indexes;
import com.svnlan.jooq.Keys;
import com.svnlan.jooq.tables.records.SystemLogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 系统日志表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemLog extends TableImpl<SystemLogRecord> {

    private static final long serialVersionUID = 1676209272;

    /**
     * The reference instance of <code>cloud_disk.system_log</code>
     */
    public static final SystemLog SYSTEM_LOG = new SystemLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SystemLogRecord> getRecordType() {
        return SystemLogRecord.class;
    }

    /**
     * The column <code>cloud_disk.system_log.id</code>.
     */
    public final TableField<SystemLogRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cloud_disk.system_log.session_id</code>. session识别码，用于登陆时记录ip,UA等信息
     */
    public final TableField<SystemLogRecord, String> SESSION_ID = createField(DSL.name("session_id"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "session识别码，用于登陆时记录ip,UA等信息");

    /**
     * The column <code>cloud_disk.system_log.user_id</code>. 用户id
     */
    public final TableField<SystemLogRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户id");

    /**
     * The column <code>cloud_disk.system_log.type</code>. 日志类型
     */
    public final TableField<SystemLogRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "日志类型");

    /**
     * The column <code>cloud_disk.system_log.detail</code>. 详情
     */
    public final TableField<SystemLogRecord, String> DETAIL = createField(DSL.name("detail"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "详情");

    /**
     * The column <code>cloud_disk.system_log.visit_date</code>. 日期
     */
    public final TableField<SystemLogRecord, Date> VISIT_DATE = createField(DSL.name("visit_date"), org.jooq.impl.SQLDataType.DATE.nullable(false), this, "日期");

    /**
     * The column <code>cloud_disk.system_log.client_type</code>. 1pc , 2h5, 3安卓app, 4 ios-app, 5小程序
     */
    public final TableField<SystemLogRecord, String> CLIENT_TYPE = createField(DSL.name("client_type"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "1pc , 2h5, 3安卓app, 4 ios-app, 5小程序");

    /**
     * The column <code>cloud_disk.system_log.os_name</code>. 操作系统
     */
    public final TableField<SystemLogRecord, String> OS_NAME = createField(DSL.name("os_name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "操作系统");

    /**
     * The column <code>cloud_disk.system_log.create_time</code>. 创建时间
     */
    public final TableField<SystemLogRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>cloud_disk.system_log.tenant_id</code>. 租户id
     */
    public final TableField<SystemLogRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), org.jooq.impl.SQLDataType.BIGINT, this, "租户id");

    /**
     * Create a <code>cloud_disk.system_log</code> table reference
     */
    public SystemLog() {
        this(DSL.name("system_log"), null);
    }

    /**
     * Create an aliased <code>cloud_disk.system_log</code> table reference
     */
    public SystemLog(String alias) {
        this(DSL.name(alias), SYSTEM_LOG);
    }

    /**
     * Create an aliased <code>cloud_disk.system_log</code> table reference
     */
    public SystemLog(Name alias) {
        this(alias, SYSTEM_LOG);
    }

    private SystemLog(Name alias, Table<SystemLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private SystemLog(Name alias, Table<SystemLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("系统日志表"));
    }

    public <O extends Record> SystemLog(Table<O> child, ForeignKey<O, SystemLogRecord> key) {
        super(child, key, SYSTEM_LOG);
    }

    @Override
    public Schema getSchema() {
        return CloudDisk.CLOUD_DISK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYSTEM_LOG_PRIMARY, Indexes.SYSTEM_LOG_SYSTEM_LOG_TYPE);
    }

    @Override
    public Identity<SystemLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_SYSTEM_LOG;
    }

    @Override
    public UniqueKey<SystemLogRecord> getPrimaryKey() {
        return Keys.KEY_SYSTEM_LOG_PRIMARY;
    }

    @Override
    public List<UniqueKey<SystemLogRecord>> getKeys() {
        return Arrays.<UniqueKey<SystemLogRecord>>asList(Keys.KEY_SYSTEM_LOG_PRIMARY);
    }

    @Override
    public SystemLog as(String alias) {
        return new SystemLog(DSL.name(alias), this);
    }

    @Override
    public SystemLog as(Name alias) {
        return new SystemLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemLog rename(String name) {
        return new SystemLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemLog rename(Name name) {
        return new SystemLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, Long, String, String, Date, String, String, LocalDateTime, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables;


import com.svnlan.jooq.CloudDisk;
import com.svnlan.jooq.Indexes;
import com.svnlan.jooq.Keys;
import com.svnlan.jooq.tables.records.UsersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 用户表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = -664827006;

    /**
     * The reference instance of <code>cloud_disk.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>cloud_disk.users.id</code>.
     */
    public final TableField<UsersRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cloud_disk.users.name</code>. 登陆用户名
     */
    public final TableField<UsersRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "登陆用户名");

    /**
     * The column <code>cloud_disk.users.role_id</code>. 用户角色
     */
    public final TableField<UsersRecord, Integer> ROLE_ID = createField(DSL.name("role_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "用户角色");

    /**
     * The column <code>cloud_disk.users.email</code>. 邮箱
     */
    public final TableField<UsersRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "邮箱");

    /**
     * The column <code>cloud_disk.users.phone</code>. 手机
     */
    public final TableField<UsersRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "手机");

    /**
     * The column <code>cloud_disk.users.nickname</code>. 昵称
     */
    public final TableField<UsersRecord, String> NICKNAME = createField(DSL.name("nickname"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "昵称");

    /**
     * The column <code>cloud_disk.users.avatar</code>. 头像
     */
    public final TableField<UsersRecord, String> AVATAR = createField(DSL.name("avatar"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "头像");

    /**
     * The column <code>cloud_disk.users.sex</code>. 性别 (0女1男)
     */
    public final TableField<UsersRecord, Integer> SEX = createField(DSL.name("sex"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "性别 (0女1男)");

    /**
     * The column <code>cloud_disk.users.password</code>. 密码
     */
    public final TableField<UsersRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "密码");

    /**
     * The column <code>cloud_disk.users.size_max</code>. 群组存储空间大小(GB) 0-不限制
     */
    public final TableField<UsersRecord, Double> SIZE_MAX = createField(DSL.name("size_max"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "群组存储空间大小(GB) 0-不限制");

    /**
     * The column <code>cloud_disk.users.size_use</code>. 已使用大小(byte)
     */
    public final TableField<UsersRecord, Long> SIZE_USE = createField(DSL.name("size_use"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "已使用大小(byte)");

    /**
     * The column <code>cloud_disk.users.status</code>. 用户启用状态 0-未启用 1-启用
     */
    public final TableField<UsersRecord, Integer> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "用户启用状态 0-未启用 1-启用");

    /**
     * The column <code>cloud_disk.users.ding_open_id</code>. 钉钉 openId
     */
    public final TableField<UsersRecord, String> DING_OPEN_ID = createField(DSL.name("ding_open_id"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "钉钉 openId");

    /**
     * The column <code>cloud_disk.users.wechat_open_id</code>. 微信 openId
     */
    public final TableField<UsersRecord, String> WECHAT_OPEN_ID = createField(DSL.name("wechat_open_id"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "微信 openId");

    /**
     * The column <code>cloud_disk.users.en_wechat_open_id</code>. 企业微信 openId
     */
    public final TableField<UsersRecord, String> EN_WECHAT_OPEN_ID = createField(DSL.name("en_wechat_open_id"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "企业微信 openId");

    /**
     * The column <code>cloud_disk.users.alipay_open_id</code>. 支付宝 openId
     */
    public final TableField<UsersRecord, String> ALIPAY_OPEN_ID = createField(DSL.name("alipay_open_id"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "支付宝 openId");

    /**
     * The column <code>cloud_disk.users.is_system</code>. 是否是系统用户
     */
    public final TableField<UsersRecord, Integer> IS_SYSTEM = createField(DSL.name("is_system"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "是否是系统用户");

    /**
     * The column <code>cloud_disk.users.last_login</code>. 最后登陆时间
     */
    public final TableField<UsersRecord, LocalDateTime> LAST_LOGIN = createField(DSL.name("last_login"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "最后登陆时间");

    /**
     * The column <code>cloud_disk.users.create_time</code>. 创建时间
     */
    public final TableField<UsersRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>cloud_disk.users.modify_time</code>. 最后修改时间
     */
    public final TableField<UsersRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "最后修改时间");

    /**
     * The column <code>cloud_disk.users.tenant_id</code>. 租户id
     */
    public final TableField<UsersRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), org.jooq.impl.SQLDataType.BIGINT, this, "租户id");

    /**
     * Create a <code>cloud_disk.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    /**
     * Create an aliased <code>cloud_disk.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>cloud_disk.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户表"));
    }

    public <O extends Record> Users(Table<O> child, ForeignKey<O, UsersRecord> key) {
        super(child, key, USERS);
    }

    @Override
    public Schema getSchema() {
        return CloudDisk.CLOUD_DISK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERS_NICKNAME, Indexes.USERS_PHONE, Indexes.USERS_PRIMARY, Indexes.USERS_USER_EMAIL, Indexes.USERS_USER_NAME, Indexes.USERS_USERS_STATUS);
    }

    @Override
    public Identity<UsersRecord, Long> getIdentity() {
        return Keys.IDENTITY_USERS;
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.KEY_USERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<UsersRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersRecord>>asList(Keys.KEY_USERS_PRIMARY);
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<Long, String, Integer, String, String, String, String, Integer, String, Double, Long, Integer, String, String, String, String, Integer, LocalDateTime, LocalDateTime, LocalDateTime, Long> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables.daos;


import com.svnlan.jooq.tables.UserFav;
import com.svnlan.jooq.tables.pojos.UserFavModel;
import com.svnlan.jooq.tables.records.UserFavRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 用户文档标签表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFavDao extends DAOImpl<UserFavRecord, UserFavModel, Long> {

    /**
     * Create a new UserFavDao without any configuration
     */
    public UserFavDao() {
        super(UserFav.USER_FAV, UserFavModel.class);
    }

    /**
     * Create a new UserFavDao with an attached configuration
     */
    public UserFavDao(Configuration configuration) {
        super(UserFav.USER_FAV, UserFavModel.class, configuration);
    }

    @Override
    public Long getId(UserFavModel object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserFavModel> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserFav.USER_FAV.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UserFavModel> fetchById(Long... values) {
        return fetch(UserFav.USER_FAV.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UserFavModel fetchOneById(Long value) {
        return fetchOne(UserFav.USER_FAV.ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserFavModel> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserFav.USER_FAV.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<UserFavModel> fetchByUserId(Long... values) {
        return fetch(UserFav.USER_FAV.USER_ID, values);
    }

    /**
     * Fetch records that have <code>tag_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserFavModel> fetchRangeOfTagId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserFav.USER_FAV.TAG_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tag_id IN (values)</code>
     */
    public List<UserFavModel> fetchByTagId(Integer... values) {
        return fetch(UserFav.USER_FAV.TAG_ID, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserFavModel> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserFav.USER_FAV.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<UserFavModel> fetchByName(String... values) {
        return fetch(UserFav.USER_FAV.NAME, values);
    }

    /**
     * Fetch records that have <code>path BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserFavModel> fetchRangeOfPath(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserFav.USER_FAV.PATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>path IN (values)</code>
     */
    public List<UserFavModel> fetchByPath(String... values) {
        return fetch(UserFav.USER_FAV.PATH, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserFavModel> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserFav.USER_FAV.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<UserFavModel> fetchByType(String... values) {
        return fetch(UserFav.USER_FAV.TYPE, values);
    }

    /**
     * Fetch records that have <code>sort BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserFavModel> fetchRangeOfSort(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserFav.USER_FAV.SORT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sort IN (values)</code>
     */
    public List<UserFavModel> fetchBySort(Integer... values) {
        return fetch(UserFav.USER_FAV.SORT, values);
    }

    /**
     * Fetch records that have <code>modify_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserFavModel> fetchRangeOfModifyTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserFav.USER_FAV.MODIFY_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_time IN (values)</code>
     */
    public List<UserFavModel> fetchByModifyTime(LocalDateTime... values) {
        return fetch(UserFav.USER_FAV.MODIFY_TIME, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserFavModel> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserFav.USER_FAV.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<UserFavModel> fetchByCreateTime(LocalDateTime... values) {
        return fetch(UserFav.USER_FAV.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserFavModel> fetchRangeOfTenantId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserFav.USER_FAV.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<UserFavModel> fetchByTenantId(Long... values) {
        return fetch(UserFav.USER_FAV.TENANT_ID, values);
    }
}

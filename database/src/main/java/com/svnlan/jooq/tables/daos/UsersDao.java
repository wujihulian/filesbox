/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables.daos;


import com.svnlan.jooq.tables.Users;
import com.svnlan.jooq.tables.pojos.UsersModel;
import com.svnlan.jooq.tables.records.UsersRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 用户表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersDao extends DAOImpl<UsersRecord, UsersModel, Long> {

    /**
     * Create a new UsersDao without any configuration
     */
    public UsersDao() {
        super(Users.USERS, UsersModel.class);
    }

    /**
     * Create a new UsersDao with an attached configuration
     */
    public UsersDao(Configuration configuration) {
        super(Users.USERS, UsersModel.class, configuration);
    }

    @Override
    public Long getId(UsersModel object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Users.USERS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UsersModel> fetchById(Long... values) {
        return fetch(Users.USERS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UsersModel fetchOneById(Long value) {
        return fetchOne(Users.USERS.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<UsersModel> fetchByName(String... values) {
        return fetch(Users.USERS.NAME, values);
    }

    /**
     * Fetch records that have <code>role_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfRoleId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Users.USERS.ROLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role_id IN (values)</code>
     */
    public List<UsersModel> fetchByRoleId(Integer... values) {
        return fetch(Users.USERS.ROLE_ID, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<UsersModel> fetchByEmail(String... values) {
        return fetch(Users.USERS.EMAIL, values);
    }

    /**
     * Fetch records that have <code>phone BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfPhone(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.PHONE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>phone IN (values)</code>
     */
    public List<UsersModel> fetchByPhone(String... values) {
        return fetch(Users.USERS.PHONE, values);
    }

    /**
     * Fetch records that have <code>nickname BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfNickname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.NICKNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nickname IN (values)</code>
     */
    public List<UsersModel> fetchByNickname(String... values) {
        return fetch(Users.USERS.NICKNAME, values);
    }

    /**
     * Fetch records that have <code>avatar BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfAvatar(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.AVATAR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>avatar IN (values)</code>
     */
    public List<UsersModel> fetchByAvatar(String... values) {
        return fetch(Users.USERS.AVATAR, values);
    }

    /**
     * Fetch records that have <code>sex BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfSex(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Users.USERS.SEX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sex IN (values)</code>
     */
    public List<UsersModel> fetchBySex(Integer... values) {
        return fetch(Users.USERS.SEX, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<UsersModel> fetchByPassword(String... values) {
        return fetch(Users.USERS.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>size_max BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfSizeMax(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Users.USERS.SIZE_MAX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>size_max IN (values)</code>
     */
    public List<UsersModel> fetchBySizeMax(Double... values) {
        return fetch(Users.USERS.SIZE_MAX, values);
    }

    /**
     * Fetch records that have <code>size_use BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfSizeUse(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Users.USERS.SIZE_USE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>size_use IN (values)</code>
     */
    public List<UsersModel> fetchBySizeUse(Long... values) {
        return fetch(Users.USERS.SIZE_USE, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfStatus(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Users.USERS.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<UsersModel> fetchByStatus(Integer... values) {
        return fetch(Users.USERS.STATUS, values);
    }

    /**
     * Fetch records that have <code>ding_open_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfDingOpenId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.DING_OPEN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ding_open_id IN (values)</code>
     */
    public List<UsersModel> fetchByDingOpenId(String... values) {
        return fetch(Users.USERS.DING_OPEN_ID, values);
    }

    /**
     * Fetch records that have <code>wechat_open_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfWechatOpenId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.WECHAT_OPEN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>wechat_open_id IN (values)</code>
     */
    public List<UsersModel> fetchByWechatOpenId(String... values) {
        return fetch(Users.USERS.WECHAT_OPEN_ID, values);
    }

    /**
     * Fetch records that have <code>en_wechat_open_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfEnWechatOpenId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.EN_WECHAT_OPEN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>en_wechat_open_id IN (values)</code>
     */
    public List<UsersModel> fetchByEnWechatOpenId(String... values) {
        return fetch(Users.USERS.EN_WECHAT_OPEN_ID, values);
    }

    /**
     * Fetch records that have <code>alipay_open_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfAlipayOpenId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.ALIPAY_OPEN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>alipay_open_id IN (values)</code>
     */
    public List<UsersModel> fetchByAlipayOpenId(String... values) {
        return fetch(Users.USERS.ALIPAY_OPEN_ID, values);
    }

    /**
     * Fetch records that have <code>is_system BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfIsSystem(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Users.USERS.IS_SYSTEM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_system IN (values)</code>
     */
    public List<UsersModel> fetchByIsSystem(Integer... values) {
        return fetch(Users.USERS.IS_SYSTEM, values);
    }

    /**
     * Fetch records that have <code>last_login BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfLastLogin(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Users.USERS.LAST_LOGIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_login IN (values)</code>
     */
    public List<UsersModel> fetchByLastLogin(LocalDateTime... values) {
        return fetch(Users.USERS.LAST_LOGIN, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Users.USERS.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<UsersModel> fetchByCreateTime(LocalDateTime... values) {
        return fetch(Users.USERS.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>modify_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfModifyTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Users.USERS.MODIFY_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_time IN (values)</code>
     */
    public List<UsersModel> fetchByModifyTime(LocalDateTime... values) {
        return fetch(Users.USERS.MODIFY_TIME, values);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UsersModel> fetchRangeOfTenantId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Users.USERS.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<UsersModel> fetchByTenantId(Long... values) {
        return fetch(Users.USERS.TENANT_ID, values);
    }
}

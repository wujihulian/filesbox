/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables;


import com.svnlan.jooq.CloudDisk;
import com.svnlan.jooq.Indexes;
import com.svnlan.jooq.Keys;
import com.svnlan.jooq.tables.records.SystemSessionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * session
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemSession extends TableImpl<SystemSessionRecord> {

    private static final long serialVersionUID = 1964823524;

    /**
     * The reference instance of <code>cloud_disk.system_session</code>
     */
    public static final SystemSession SYSTEM_SESSION = new SystemSession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SystemSessionRecord> getRecordType() {
        return SystemSessionRecord.class;
    }

    /**
     * The column <code>cloud_disk.system_session.id</code>.
     */
    public final TableField<SystemSessionRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>cloud_disk.system_session.sign</code>. session标识
     */
    public final TableField<SystemSessionRecord, String> SIGN = createField(DSL.name("sign"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "session标识");

    /**
     * The column <code>cloud_disk.system_session.user_id</code>. 用户id
     */
    public final TableField<SystemSessionRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户id");

    /**
     * The column <code>cloud_disk.system_session.content</code>. value_text
     */
    public final TableField<SystemSessionRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "value_text");

    /**
     * The column <code>cloud_disk.system_session.expires</code>. 过期时间
     */
    public final TableField<SystemSessionRecord, Long> EXPIRES = createField(DSL.name("expires"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "过期时间");

    /**
     * The column <code>cloud_disk.system_session.modify_time</code>. 修改时间
     */
    public final TableField<SystemSessionRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "修改时间");

    /**
     * The column <code>cloud_disk.system_session.create_time</code>. 创建时间
     */
    public final TableField<SystemSessionRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>cloud_disk.system_session.tenant_id</code>. 租户id
     */
    public final TableField<SystemSessionRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), org.jooq.impl.SQLDataType.BIGINT, this, "租户id");

    /**
     * Create a <code>cloud_disk.system_session</code> table reference
     */
    public SystemSession() {
        this(DSL.name("system_session"), null);
    }

    /**
     * Create an aliased <code>cloud_disk.system_session</code> table reference
     */
    public SystemSession(String alias) {
        this(DSL.name(alias), SYSTEM_SESSION);
    }

    /**
     * Create an aliased <code>cloud_disk.system_session</code> table reference
     */
    public SystemSession(Name alias) {
        this(alias, SYSTEM_SESSION);
    }

    private SystemSession(Name alias, Table<SystemSessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SystemSession(Name alias, Table<SystemSessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("session"));
    }

    public <O extends Record> SystemSession(Table<O> child, ForeignKey<O, SystemSessionRecord> key) {
        super(child, key, SYSTEM_SESSION);
    }

    @Override
    public Schema getSchema() {
        return CloudDisk.CLOUD_DISK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYSTEM_SESSION_PRIMARY, Indexes.SYSTEM_SESSION_SIGN, Indexes.SYSTEM_SESSION_SYSTEM_SESSION_EXPIRES);
    }

    @Override
    public Identity<SystemSessionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SYSTEM_SESSION;
    }

    @Override
    public UniqueKey<SystemSessionRecord> getPrimaryKey() {
        return Keys.KEY_SYSTEM_SESSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<SystemSessionRecord>> getKeys() {
        return Arrays.<UniqueKey<SystemSessionRecord>>asList(Keys.KEY_SYSTEM_SESSION_PRIMARY, Keys.KEY_SYSTEM_SESSION_SIGN);
    }

    @Override
    public SystemSession as(String alias) {
        return new SystemSession(DSL.name(alias), this);
    }

    @Override
    public SystemSession as(Name alias) {
        return new SystemSession(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemSession rename(String name) {
        return new SystemSession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemSession rename(Name name) {
        return new SystemSession(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, Long, String, Long, LocalDateTime, LocalDateTime, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}

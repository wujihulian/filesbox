/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables;


import com.svnlan.jooq.CloudDisk;
import com.svnlan.jooq.Indexes;
import com.svnlan.jooq.Keys;
import com.svnlan.jooq.tables.records.RoleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 角色表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Role extends TableImpl<RoleRecord> {

    private static final long serialVersionUID = 292830103;

    /**
     * The reference instance of <code>cloud_disk.role</code>
     */
    public static final Role ROLE = new Role();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoleRecord> getRecordType() {
        return RoleRecord.class;
    }

    /**
     * The column <code>cloud_disk.role.id</code>.
     */
    public final TableField<RoleRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>cloud_disk.role.role_name</code>. 角色名称
     */
    public final TableField<RoleRecord, String> ROLE_NAME = createField(DSL.name("role_name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "角色名称");

    /**
     * The column <code>cloud_disk.role.code</code>. code
     */
    public final TableField<RoleRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "code");

    /**
     * The column <code>cloud_disk.role.description</code>. 描述
     */
    public final TableField<RoleRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "描述");

    /**
     * The column <code>cloud_disk.role.label</code>. label
     */
    public final TableField<RoleRecord, String> LABEL = createField(DSL.name("label"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "label");

    /**
     * The column <code>cloud_disk.role.auth</code>. 权限
     */
    public final TableField<RoleRecord, String> AUTH = createField(DSL.name("auth"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "权限");

    /**
     * The column <code>cloud_disk.role.status</code>. 状态，1正常，2删除
     */
    public final TableField<RoleRecord, Integer> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "状态，1正常，2删除");

    /**
     * The column <code>cloud_disk.role.enable</code>. 是否启用，0未启用，1启用
     */
    public final TableField<RoleRecord, Integer> ENABLE = createField(DSL.name("enable"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "是否启用，0未启用，1启用");

    /**
     * The column <code>cloud_disk.role.is_system</code>. 是否系统配置
     */
    public final TableField<RoleRecord, Integer> IS_SYSTEM = createField(DSL.name("is_system"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "是否系统配置");

    /**
     * The column <code>cloud_disk.role.administrator</code>. 是否系统管理员
     */
    public final TableField<RoleRecord, Integer> ADMINISTRATOR = createField(DSL.name("administrator"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "是否系统管理员");

    /**
     * The column <code>cloud_disk.role.ignore_file_size</code>. 上传文件大小限制
     */
    public final TableField<RoleRecord, Double> IGNORE_FILE_SIZE = createField(DSL.name("ignore_file_size"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DOUBLE)), this, "上传文件大小限制");

    /**
     * The column <code>cloud_disk.role.ignore_ext</code>.
     */
    public final TableField<RoleRecord, String> IGNORE_EXT = createField(DSL.name("ignore_ext"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>cloud_disk.role.sort</code>. 排序
     */
    public final TableField<RoleRecord, Integer> SORT = createField(DSL.name("sort"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "排序");

    /**
     * The column <code>cloud_disk.role.role_type</code>. 角色类型，1用户角色，2文档角色
     */
    public final TableField<RoleRecord, String> ROLE_TYPE = createField(DSL.name("role_type"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "角色类型，1用户角色，2文档角色");

    /**
     * The column <code>cloud_disk.role.create_time</code>. 创建时间
     */
    public final TableField<RoleRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>cloud_disk.role.modify_time</code>. 最后修改时间
     */
    public final TableField<RoleRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "最后修改时间");

    /**
     * The column <code>cloud_disk.role.delete_time</code>. 删除时间
     */
    public final TableField<RoleRecord, LocalDateTime> DELETE_TIME = createField(DSL.name("delete_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "删除时间");

    /**
     * The column <code>cloud_disk.role.tenant_id</code>. 租户id
     */
    public final TableField<RoleRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), org.jooq.impl.SQLDataType.BIGINT, this, "租户id");

    /**
     * Create a <code>cloud_disk.role</code> table reference
     */
    public Role() {
        this(DSL.name("role"), null);
    }

    /**
     * Create an aliased <code>cloud_disk.role</code> table reference
     */
    public Role(String alias) {
        this(DSL.name(alias), ROLE);
    }

    /**
     * Create an aliased <code>cloud_disk.role</code> table reference
     */
    public Role(Name alias) {
        this(alias, ROLE);
    }

    private Role(Name alias, Table<RoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Role(Name alias, Table<RoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("角色表"));
    }

    public <O extends Record> Role(Table<O> child, ForeignKey<O, RoleRecord> key) {
        super(child, key, ROLE);
    }

    @Override
    public Schema getSchema() {
        return CloudDisk.CLOUD_DISK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ROLE_PRIMARY);
    }

    @Override
    public Identity<RoleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ROLE;
    }

    @Override
    public UniqueKey<RoleRecord> getPrimaryKey() {
        return Keys.KEY_ROLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<RoleRecord>> getKeys() {
        return Arrays.<UniqueKey<RoleRecord>>asList(Keys.KEY_ROLE_PRIMARY);
    }

    @Override
    public Role as(String alias) {
        return new Role(DSL.name(alias), this);
    }

    @Override
    public Role as(Name alias) {
        return new Role(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Role rename(String name) {
        return new Role(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Role rename(Name name) {
        return new Role(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Integer, String, String, String, String, String, Integer, Integer, Integer, Integer, Double, String, Integer, String, LocalDateTime, LocalDateTime, LocalDateTime, Long> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables.daos;


import com.svnlan.jooq.tables.CommonInfo;
import com.svnlan.jooq.tables.pojos.CommonInfoModel;
import com.svnlan.jooq.tables.records.CommonInfoRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 资讯表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommonInfoDao extends DAOImpl<CommonInfoRecord, CommonInfoModel, Long> {

    /**
     * Create a new CommonInfoDao without any configuration
     */
    public CommonInfoDao() {
        super(CommonInfo.COMMON_INFO, CommonInfoModel.class);
    }

    /**
     * Create a new CommonInfoDao with an attached configuration
     */
    public CommonInfoDao(Configuration configuration) {
        super(CommonInfo.COMMON_INFO, CommonInfoModel.class, configuration);
    }

    @Override
    public Long getId(CommonInfoModel object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<CommonInfoModel> fetchById(Long... values) {
        return fetch(CommonInfo.COMMON_INFO.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public CommonInfoModel fetchOneById(Long value) {
        return fetchOne(CommonInfo.COMMON_INFO.ID, value);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<CommonInfoModel> fetchByTitle(String... values) {
        return fetch(CommonInfo.COMMON_INFO.TITLE, values);
    }

    /**
     * Fetch records that have <code>computer_pic_path BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfComputerPicPath(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.COMPUTER_PIC_PATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>computer_pic_path IN (values)</code>
     */
    public List<CommonInfoModel> fetchByComputerPicPath(String... values) {
        return fetch(CommonInfo.COMMON_INFO.COMPUTER_PIC_PATH, values);
    }

    /**
     * Fetch records that have <code>mobile_pic_path BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfMobilePicPath(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.MOBILE_PIC_PATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mobile_pic_path IN (values)</code>
     */
    public List<CommonInfoModel> fetchByMobilePicPath(String... values) {
        return fetch(CommonInfo.COMMON_INFO.MOBILE_PIC_PATH, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfStatus(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<CommonInfoModel> fetchByStatus(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.STATUS, values);
    }

    /**
     * Fetch records that have <code>detail BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfDetail(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.DETAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>detail IN (values)</code>
     */
    public List<CommonInfoModel> fetchByDetail(String... values) {
        return fetch(CommonInfo.COMMON_INFO.DETAIL, values);
    }

    /**
     * Fetch records that have <code>file_detail BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfFileDetail(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.FILE_DETAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>file_detail IN (values)</code>
     */
    public List<CommonInfoModel> fetchByFileDetail(String... values) {
        return fetch(CommonInfo.COMMON_INFO.FILE_DETAIL, values);
    }

    /**
     * Fetch records that have <code>create_user BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfCreateUser(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.CREATE_USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_user IN (values)</code>
     */
    public List<CommonInfoModel> fetchByCreateUser(Long... values) {
        return fetch(CommonInfo.COMMON_INFO.CREATE_USER, values);
    }

    /**
     * Fetch records that have <code>modify_user BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfModifyUser(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.MODIFY_USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_user IN (values)</code>
     */
    public List<CommonInfoModel> fetchByModifyUser(Long... values) {
        return fetch(CommonInfo.COMMON_INFO.MODIFY_USER, values);
    }

    /**
     * Fetch records that have <code>user_ip BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfUserIp(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.USER_IP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_ip IN (values)</code>
     */
    public List<CommonInfoModel> fetchByUserIp(String... values) {
        return fetch(CommonInfo.COMMON_INFO.USER_IP, values);
    }

    /**
     * Fetch records that have <code>info_type_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfInfoTypeId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.INFO_TYPE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>info_type_id IN (values)</code>
     */
    public List<CommonInfoModel> fetchByInfoTypeId(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.INFO_TYPE_ID, values);
    }

    /**
     * Fetch records that have <code>sort BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfSort(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.SORT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sort IN (values)</code>
     */
    public List<CommonInfoModel> fetchBySort(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.SORT, values);
    }

    /**
     * Fetch records that have <code>introduce BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfIntroduce(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.INTRODUCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>introduce IN (values)</code>
     */
    public List<CommonInfoModel> fetchByIntroduce(String... values) {
        return fetch(CommonInfo.COMMON_INFO.INTRODUCE, values);
    }

    /**
     * Fetch records that have <code>is_top BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfIsTop(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.IS_TOP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_top IN (values)</code>
     */
    public List<CommonInfoModel> fetchByIsTop(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.IS_TOP, values);
    }

    /**
     * Fetch records that have <code>seo BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfSeo(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.SEO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>seo IN (values)</code>
     */
    public List<CommonInfoModel> fetchBySeo(String... values) {
        return fetch(CommonInfo.COMMON_INFO.SEO, values);
    }

    /**
     * Fetch records that have <code>info_source BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfInfoSource(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.INFO_SOURCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>info_source IN (values)</code>
     */
    public List<CommonInfoModel> fetchByInfoSource(String... values) {
        return fetch(CommonInfo.COMMON_INFO.INFO_SOURCE, values);
    }

    /**
     * Fetch records that have <code>is_apply_original BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfIsApplyOriginal(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.IS_APPLY_ORIGINAL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_apply_original IN (values)</code>
     */
    public List<CommonInfoModel> fetchByIsApplyOriginal(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.IS_APPLY_ORIGINAL, values);
    }

    /**
     * Fetch records that have <code>video_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfVideoId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.VIDEO_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>video_id IN (values)</code>
     */
    public List<CommonInfoModel> fetchByVideoId(Long... values) {
        return fetch(CommonInfo.COMMON_INFO.VIDEO_ID, values);
    }

    /**
     * Fetch records that have <code>thumb BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfThumb(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.THUMB, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>thumb IN (values)</code>
     */
    public List<CommonInfoModel> fetchByThumb(String... values) {
        return fetch(CommonInfo.COMMON_INFO.THUMB, values);
    }

    /**
     * Fetch records that have <code>preview_url BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfPreviewUrl(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.PREVIEW_URL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>preview_url IN (values)</code>
     */
    public List<CommonInfoModel> fetchByPreviewUrl(String... values) {
        return fetch(CommonInfo.COMMON_INFO.PREVIEW_URL, values);
    }

    /**
     * Fetch records that have <code>info_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfInfoType(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.INFO_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>info_type IN (values)</code>
     */
    public List<CommonInfoModel> fetchByInfoType(String... values) {
        return fetch(CommonInfo.COMMON_INFO.INFO_TYPE, values);
    }

    /**
     * Fetch records that have <code>is_vertical BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfIsVertical(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.IS_VERTICAL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_vertical IN (values)</code>
     */
    public List<CommonInfoModel> fetchByIsVertical(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.IS_VERTICAL, values);
    }

    /**
     * Fetch records that have <code>thumb_vertical BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfThumbVertical(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.THUMB_VERTICAL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>thumb_vertical IN (values)</code>
     */
    public List<CommonInfoModel> fetchByThumbVertical(String... values) {
        return fetch(CommonInfo.COMMON_INFO.THUMB_VERTICAL, values);
    }

    /**
     * Fetch records that have <code>computer_pic_path_vertical BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfComputerPicPathVertical(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.COMPUTER_PIC_PATH_VERTICAL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>computer_pic_path_vertical IN (values)</code>
     */
    public List<CommonInfoModel> fetchByComputerPicPathVertical(String... values) {
        return fetch(CommonInfo.COMMON_INFO.COMPUTER_PIC_PATH_VERTICAL, values);
    }

    /**
     * Fetch records that have <code>is_video_exists BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfIsVideoExists(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.IS_VIDEO_EXISTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_video_exists IN (values)</code>
     */
    public List<CommonInfoModel> fetchByIsVideoExists(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.IS_VIDEO_EXISTS, values);
    }

    /**
     * Fetch records that have <code>user_agent BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfUserAgent(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.USER_AGENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_agent IN (values)</code>
     */
    public List<CommonInfoModel> fetchByUserAgent(String... values) {
        return fetch(CommonInfo.COMMON_INFO.USER_AGENT, values);
    }

    /**
     * Fetch records that have <code>is_url_info BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfIsUrlInfo(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.IS_URL_INFO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_url_info IN (values)</code>
     */
    public List<CommonInfoModel> fetchByIsUrlInfo(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.IS_URL_INFO, values);
    }

    /**
     * Fetch records that have <code>info_url BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfInfoUrl(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.INFO_URL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>info_url IN (values)</code>
     */
    public List<CommonInfoModel> fetchByInfoUrl(String... values) {
        return fetch(CommonInfo.COMMON_INFO.INFO_URL, values);
    }

    /**
     * Fetch records that have <code>attachment_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfAttachmentCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.ATTACHMENT_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>attachment_count IN (values)</code>
     */
    public List<CommonInfoModel> fetchByAttachmentCount(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.ATTACHMENT_COUNT, values);
    }

    /**
     * Fetch records that have <code>show_attachment BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfShowAttachment(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.SHOW_ATTACHMENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>show_attachment IN (values)</code>
     */
    public List<CommonInfoModel> fetchByShowAttachment(String... values) {
        return fetch(CommonInfo.COMMON_INFO.SHOW_ATTACHMENT, values);
    }

    /**
     * Fetch records that have <code>remark BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfRemark(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.REMARK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>remark IN (values)</code>
     */
    public List<CommonInfoModel> fetchByRemark(String... values) {
        return fetch(CommonInfo.COMMON_INFO.REMARK, values);
    }

    /**
     * Fetch records that have <code>is_transport BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfIsTransport(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.IS_TRANSPORT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_transport IN (values)</code>
     */
    public List<CommonInfoModel> fetchByIsTransport(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.IS_TRANSPORT, values);
    }

    /**
     * Fetch records that have <code>right_flag BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfRightFlag(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.RIGHT_FLAG, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>right_flag IN (values)</code>
     */
    public List<CommonInfoModel> fetchByRightFlag(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.RIGHT_FLAG, values);
    }

    /**
     * Fetch records that have <code>source_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfSourceId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.SOURCE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>source_id IN (values)</code>
     */
    public List<CommonInfoModel> fetchBySourceId(Long... values) {
        return fetch(CommonInfo.COMMON_INFO.SOURCE_ID, values);
    }

    /**
     * Fetch records that have <code>is_hide BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfIsHide(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.IS_HIDE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_hide IN (values)</code>
     */
    public List<CommonInfoModel> fetchByIsHide(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.IS_HIDE, values);
    }

    /**
     * Fetch records that have <code>is_login BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfIsLogin(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.IS_LOGIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_login IN (values)</code>
     */
    public List<CommonInfoModel> fetchByIsLogin(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.IS_LOGIN, values);
    }

    /**
     * Fetch records that have <code>actual_view_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfActualViewCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.ACTUAL_VIEW_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>actual_view_count IN (values)</code>
     */
    public List<CommonInfoModel> fetchByActualViewCount(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.ACTUAL_VIEW_COUNT, values);
    }

    /**
     * Fetch records that have <code>like_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfLikeCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.LIKE_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>like_count IN (values)</code>
     */
    public List<CommonInfoModel> fetchByLikeCount(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.LIKE_COUNT, values);
    }

    /**
     * Fetch records that have <code>view_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfViewCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.VIEW_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>view_count IN (values)</code>
     */
    public List<CommonInfoModel> fetchByViewCount(Integer... values) {
        return fetch(CommonInfo.COMMON_INFO.VIEW_COUNT, values);
    }

    /**
     * Fetch records that have <code>name_pinyin BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfNamePinyin(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.NAME_PINYIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name_pinyin IN (values)</code>
     */
    public List<CommonInfoModel> fetchByNamePinyin(String... values) {
        return fetch(CommonInfo.COMMON_INFO.NAME_PINYIN, values);
    }

    /**
     * Fetch records that have <code>name_pinyin_simple BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfNamePinyinSimple(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.NAME_PINYIN_SIMPLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name_pinyin_simple IN (values)</code>
     */
    public List<CommonInfoModel> fetchByNamePinyinSimple(String... values) {
        return fetch(CommonInfo.COMMON_INFO.NAME_PINYIN_SIMPLE, values);
    }

    /**
     * Fetch records that have <code>path_pre BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfPathPre(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.PATH_PRE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>path_pre IN (values)</code>
     */
    public List<CommonInfoModel> fetchByPathPre(String... values) {
        return fetch(CommonInfo.COMMON_INFO.PATH_PRE, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<CommonInfoModel> fetchByCreateTime(LocalDateTime... values) {
        return fetch(CommonInfo.COMMON_INFO.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>modify_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfModifyTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.MODIFY_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_time IN (values)</code>
     */
    public List<CommonInfoModel> fetchByModifyTime(LocalDateTime... values) {
        return fetch(CommonInfo.COMMON_INFO.MODIFY_TIME, values);
    }

    /**
     * Fetch records that have <code>gmt_page BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfGmtPage(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.GMT_PAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gmt_page IN (values)</code>
     */
    public List<CommonInfoModel> fetchByGmtPage(LocalDateTime... values) {
        return fetch(CommonInfo.COMMON_INFO.GMT_PAGE, values);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfTenantId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<CommonInfoModel> fetchByTenantId(Long... values) {
        return fetch(CommonInfo.COMMON_INFO.TENANT_ID, values);
    }

    /**
     * Fetch records that have <code>top_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommonInfoModel> fetchRangeOfTopTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CommonInfo.COMMON_INFO.TOP_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>top_time IN (values)</code>
     */
    public List<CommonInfoModel> fetchByTopTime(Long... values) {
        return fetch(CommonInfo.COMMON_INFO.TOP_TIME, values);
    }
}

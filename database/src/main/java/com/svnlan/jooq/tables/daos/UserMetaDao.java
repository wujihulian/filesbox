/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables.daos;


import com.svnlan.jooq.tables.UserMeta;
import com.svnlan.jooq.tables.pojos.UserMetaModel;
import com.svnlan.jooq.tables.records.UserMetaRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 用户数据扩展表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMetaDao extends DAOImpl<UserMetaRecord, UserMetaModel, Long> {

    /**
     * Create a new UserMetaDao without any configuration
     */
    public UserMetaDao() {
        super(UserMeta.USER_META, UserMetaModel.class);
    }

    /**
     * Create a new UserMetaDao with an attached configuration
     */
    public UserMetaDao(Configuration configuration) {
        super(UserMeta.USER_META, UserMetaModel.class, configuration);
    }

    @Override
    public Long getId(UserMetaModel object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserMetaModel> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserMeta.USER_META.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UserMetaModel> fetchById(Long... values) {
        return fetch(UserMeta.USER_META.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UserMetaModel fetchOneById(Long value) {
        return fetchOne(UserMeta.USER_META.ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserMetaModel> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserMeta.USER_META.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<UserMetaModel> fetchByUserId(Long... values) {
        return fetch(UserMeta.USER_META.USER_ID, values);
    }

    /**
     * Fetch records that have <code>key_string BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserMetaModel> fetchRangeOfKeyString(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserMeta.USER_META.KEY_STRING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>key_string IN (values)</code>
     */
    public List<UserMetaModel> fetchByKeyString(String... values) {
        return fetch(UserMeta.USER_META.KEY_STRING, values);
    }

    /**
     * Fetch records that have <code>value_text BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserMetaModel> fetchRangeOfValueText(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserMeta.USER_META.VALUE_TEXT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>value_text IN (values)</code>
     */
    public List<UserMetaModel> fetchByValueText(String... values) {
        return fetch(UserMeta.USER_META.VALUE_TEXT, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserMetaModel> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserMeta.USER_META.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<UserMetaModel> fetchByCreateTime(LocalDateTime... values) {
        return fetch(UserMeta.USER_META.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>modify_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserMetaModel> fetchRangeOfModifyTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserMeta.USER_META.MODIFY_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_time IN (values)</code>
     */
    public List<UserMetaModel> fetchByModifyTime(LocalDateTime... values) {
        return fetch(UserMeta.USER_META.MODIFY_TIME, values);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserMetaModel> fetchRangeOfTenantId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserMeta.USER_META.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<UserMetaModel> fetchByTenantId(Long... values) {
        return fetch(UserMeta.USER_META.TENANT_ID, values);
    }
}

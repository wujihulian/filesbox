/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables;


import com.svnlan.jooq.CloudDisk;
import com.svnlan.jooq.Indexes;
import com.svnlan.jooq.Keys;
import com.svnlan.jooq.tables.records.CommonInfoTypeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 资讯类型表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommonInfoType extends TableImpl<CommonInfoTypeRecord> {

    private static final long serialVersionUID = -553201861;

    /**
     * The reference instance of <code>cloud_disk.common_info_type</code>
     */
    public static final CommonInfoType COMMON_INFO_TYPE = new CommonInfoType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommonInfoTypeRecord> getRecordType() {
        return CommonInfoTypeRecord.class;
    }

    /**
     * The column <code>cloud_disk.common_info_type.id</code>.
     */
    public final TableField<CommonInfoTypeRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>cloud_disk.common_info_type.type_name</code>. 类型名称
     */
    public final TableField<CommonInfoTypeRecord, String> TYPE_NAME = createField(DSL.name("type_name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "类型名称");

    /**
     * The column <code>cloud_disk.common_info_type.parent_id</code>. 父ID
     */
    public final TableField<CommonInfoTypeRecord, Integer> PARENT_ID = createField(DSL.name("parent_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "父ID");

    /**
     * The column <code>cloud_disk.common_info_type.parent_level</code>. 父路径id; 例如:  ,2,5,10,
     */
    public final TableField<CommonInfoTypeRecord, String> PARENT_LEVEL = createField(DSL.name("parent_level"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "父路径id; 例如:  ,2,5,10,");

    /**
     * The column <code>cloud_disk.common_info_type.status</code>. 状态 0禁用，1启用
     */
    public final TableField<CommonInfoTypeRecord, Integer> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "状态 0禁用，1启用");

    /**
     * The column <code>cloud_disk.common_info_type.sort</code>. 排序
     */
    public final TableField<CommonInfoTypeRecord, Integer> SORT = createField(DSL.name("sort"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "排序");

    /**
     * The column <code>cloud_disk.common_info_type.name_pinyin</code>. 拼音全称
     */
    public final TableField<CommonInfoTypeRecord, String> NAME_PINYIN = createField(DSL.name("name_pinyin"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "拼音全称");

    /**
     * The column <code>cloud_disk.common_info_type.name_pinyin_simple</code>. 拼音首字母
     */
    public final TableField<CommonInfoTypeRecord, String> NAME_PINYIN_SIMPLE = createField(DSL.name("name_pinyin_simple"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "拼音首字母");

    /**
     * The column <code>cloud_disk.common_info_type.create_user</code>. 创建者id
     */
    public final TableField<CommonInfoTypeRecord, Long> CREATE_USER = createField(DSL.name("create_user"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "创建者id");

    /**
     * The column <code>cloud_disk.common_info_type.create_time</code>. 创建时间
     */
    public final TableField<CommonInfoTypeRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>cloud_disk.common_info_type.modify_time</code>. 最后修改时间
     */
    public final TableField<CommonInfoTypeRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "最后修改时间");

    /**
     * The column <code>cloud_disk.common_info_type.tenant_id</code>. 租户id
     */
    public final TableField<CommonInfoTypeRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), org.jooq.impl.SQLDataType.BIGINT, this, "租户id");

    /**
     * Create a <code>cloud_disk.common_info_type</code> table reference
     */
    public CommonInfoType() {
        this(DSL.name("common_info_type"), null);
    }

    /**
     * Create an aliased <code>cloud_disk.common_info_type</code> table reference
     */
    public CommonInfoType(String alias) {
        this(DSL.name(alias), COMMON_INFO_TYPE);
    }

    /**
     * Create an aliased <code>cloud_disk.common_info_type</code> table reference
     */
    public CommonInfoType(Name alias) {
        this(alias, COMMON_INFO_TYPE);
    }

    private CommonInfoType(Name alias, Table<CommonInfoTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CommonInfoType(Name alias, Table<CommonInfoTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("资讯类型表"));
    }

    public <O extends Record> CommonInfoType(Table<O> child, ForeignKey<O, CommonInfoTypeRecord> key) {
        super(child, key, COMMON_INFO_TYPE);
    }

    @Override
    public Schema getSchema() {
        return CloudDisk.CLOUD_DISK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMMON_INFO_TYPE_PRIMARY);
    }

    @Override
    public Identity<CommonInfoTypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMMON_INFO_TYPE;
    }

    @Override
    public UniqueKey<CommonInfoTypeRecord> getPrimaryKey() {
        return Keys.KEY_COMMON_INFO_TYPE_PRIMARY;
    }

    @Override
    public List<UniqueKey<CommonInfoTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<CommonInfoTypeRecord>>asList(Keys.KEY_COMMON_INFO_TYPE_PRIMARY);
    }

    @Override
    public CommonInfoType as(String alias) {
        return new CommonInfoType(DSL.name(alias), this);
    }

    @Override
    public CommonInfoType as(Name alias) {
        return new CommonInfoType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonInfoType rename(String name) {
        return new CommonInfoType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonInfoType rename(Name name) {
        return new CommonInfoType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, Integer, String, Integer, Integer, String, String, Long, LocalDateTime, LocalDateTime, Long> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}

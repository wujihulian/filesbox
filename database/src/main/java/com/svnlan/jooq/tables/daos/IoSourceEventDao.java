/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables.daos;


import com.svnlan.jooq.tables.IoSourceEvent;
import com.svnlan.jooq.tables.pojos.IoSourceEventModel;
import com.svnlan.jooq.tables.records.IoSourceEventRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 文档事件表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IoSourceEventDao extends DAOImpl<IoSourceEventRecord, IoSourceEventModel, Long> {

    /**
     * Create a new IoSourceEventDao without any configuration
     */
    public IoSourceEventDao() {
        super(IoSourceEvent.IO_SOURCE_EVENT, IoSourceEventModel.class);
    }

    /**
     * Create a new IoSourceEventDao with an attached configuration
     */
    public IoSourceEventDao(Configuration configuration) {
        super(IoSourceEvent.IO_SOURCE_EVENT, IoSourceEventModel.class, configuration);
    }

    @Override
    public Long getId(IoSourceEventModel object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceEventModel> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSourceEvent.IO_SOURCE_EVENT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<IoSourceEventModel> fetchById(Long... values) {
        return fetch(IoSourceEvent.IO_SOURCE_EVENT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public IoSourceEventModel fetchOneById(Long value) {
        return fetchOne(IoSourceEvent.IO_SOURCE_EVENT.ID, value);
    }

    /**
     * Fetch records that have <code>source_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceEventModel> fetchRangeOfSourceId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSourceEvent.IO_SOURCE_EVENT.SOURCE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>source_id IN (values)</code>
     */
    public List<IoSourceEventModel> fetchBySourceId(Long... values) {
        return fetch(IoSourceEvent.IO_SOURCE_EVENT.SOURCE_ID, values);
    }

    /**
     * Fetch records that have <code>source_parent BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceEventModel> fetchRangeOfSourceParent(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSourceEvent.IO_SOURCE_EVENT.SOURCE_PARENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>source_parent IN (values)</code>
     */
    public List<IoSourceEventModel> fetchBySourceParent(Long... values) {
        return fetch(IoSourceEvent.IO_SOURCE_EVENT.SOURCE_PARENT, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceEventModel> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSourceEvent.IO_SOURCE_EVENT.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<IoSourceEventModel> fetchByUserId(Long... values) {
        return fetch(IoSourceEvent.IO_SOURCE_EVENT.USER_ID, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceEventModel> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(IoSourceEvent.IO_SOURCE_EVENT.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<IoSourceEventModel> fetchByType(String... values) {
        return fetch(IoSourceEvent.IO_SOURCE_EVENT.TYPE, values);
    }

    /**
     * Fetch records that have <code>detail BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceEventModel> fetchRangeOfDetail(String lowerInclusive, String upperInclusive) {
        return fetchRange(IoSourceEvent.IO_SOURCE_EVENT.DETAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>detail IN (values)</code>
     */
    public List<IoSourceEventModel> fetchByDetail(String... values) {
        return fetch(IoSourceEvent.IO_SOURCE_EVENT.DETAIL, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceEventModel> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(IoSourceEvent.IO_SOURCE_EVENT.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<IoSourceEventModel> fetchByCreateTime(LocalDateTime... values) {
        return fetch(IoSourceEvent.IO_SOURCE_EVENT.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<IoSourceEventModel> fetchRangeOfTenantId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IoSourceEvent.IO_SOURCE_EVENT.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<IoSourceEventModel> fetchByTenantId(Long... values) {
        return fetch(IoSourceEvent.IO_SOURCE_EVENT.TENANT_ID, values);
    }
}

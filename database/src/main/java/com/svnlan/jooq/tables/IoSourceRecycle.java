/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables;


import com.svnlan.jooq.CloudDisk;
import com.svnlan.jooq.Indexes;
import com.svnlan.jooq.Keys;
import com.svnlan.jooq.tables.records.IoSourceRecycleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 文档回收站
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IoSourceRecycle extends TableImpl<IoSourceRecycleRecord> {

    private static final long serialVersionUID = -14633157;

    /**
     * The reference instance of <code>cloud_disk.io_source_recycle</code>
     */
    public static final IoSourceRecycle IO_SOURCE_RECYCLE = new IoSourceRecycle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IoSourceRecycleRecord> getRecordType() {
        return IoSourceRecycleRecord.class;
    }

    /**
     * The column <code>cloud_disk.io_source_recycle.id</code>.
     */
    public final TableField<IoSourceRecycleRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cloud_disk.io_source_recycle.target_type</code>. 文档所属类型 (0-sys,1-user,2-group)
     */
    public final TableField<IoSourceRecycleRecord, Integer> TARGET_TYPE = createField(DSL.name("target_type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "文档所属类型 (0-sys,1-user,2-group)");

    /**
     * The column <code>cloud_disk.io_source_recycle.target_id</code>. 拥有者对象id
     */
    public final TableField<IoSourceRecycleRecord, Long> TARGET_ID = createField(DSL.name("target_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "拥有者对象id");

    /**
     * The column <code>cloud_disk.io_source_recycle.source_id</code>. 文档id
     */
    public final TableField<IoSourceRecycleRecord, Long> SOURCE_ID = createField(DSL.name("source_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "文档id");

    /**
     * The column <code>cloud_disk.io_source_recycle.user_id</code>. 操作者id
     */
    public final TableField<IoSourceRecycleRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "操作者id");

    /**
     * The column <code>cloud_disk.io_source_recycle.parent_level</code>. 文档上层关系;冗余字段,便于统计回收站信息
     */
    public final TableField<IoSourceRecycleRecord, String> PARENT_LEVEL = createField(DSL.name("parent_level"), org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false), this, "文档上层关系;冗余字段,便于统计回收站信息");

    /**
     * The column <code>cloud_disk.io_source_recycle.create_time</code>. 创建时间
     */
    public final TableField<IoSourceRecycleRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>cloud_disk.io_source_recycle.tenant_id</code>. 租户id
     */
    public final TableField<IoSourceRecycleRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), org.jooq.impl.SQLDataType.BIGINT, this, "租户id");

    /**
     * Create a <code>cloud_disk.io_source_recycle</code> table reference
     */
    public IoSourceRecycle() {
        this(DSL.name("io_source_recycle"), null);
    }

    /**
     * Create an aliased <code>cloud_disk.io_source_recycle</code> table reference
     */
    public IoSourceRecycle(String alias) {
        this(DSL.name(alias), IO_SOURCE_RECYCLE);
    }

    /**
     * Create an aliased <code>cloud_disk.io_source_recycle</code> table reference
     */
    public IoSourceRecycle(Name alias) {
        this(alias, IO_SOURCE_RECYCLE);
    }

    private IoSourceRecycle(Name alias, Table<IoSourceRecycleRecord> aliased) {
        this(alias, aliased, null);
    }

    private IoSourceRecycle(Name alias, Table<IoSourceRecycleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("文档回收站"));
    }

    public <O extends Record> IoSourceRecycle(Table<O> child, ForeignKey<O, IoSourceRecycleRecord> key) {
        super(child, key, IO_SOURCE_RECYCLE);
    }

    @Override
    public Schema getSchema() {
        return CloudDisk.CLOUD_DISK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IO_SOURCE_RECYCLE_PRIMARY);
    }

    @Override
    public Identity<IoSourceRecycleRecord, Long> getIdentity() {
        return Keys.IDENTITY_IO_SOURCE_RECYCLE;
    }

    @Override
    public UniqueKey<IoSourceRecycleRecord> getPrimaryKey() {
        return Keys.KEY_IO_SOURCE_RECYCLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<IoSourceRecycleRecord>> getKeys() {
        return Arrays.<UniqueKey<IoSourceRecycleRecord>>asList(Keys.KEY_IO_SOURCE_RECYCLE_PRIMARY);
    }

    @Override
    public IoSourceRecycle as(String alias) {
        return new IoSourceRecycle(DSL.name(alias), this);
    }

    @Override
    public IoSourceRecycle as(Name alias) {
        return new IoSourceRecycle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IoSourceRecycle rename(String name) {
        return new IoSourceRecycle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IoSourceRecycle rename(Name name) {
        return new IoSourceRecycle(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Integer, Long, Long, Long, String, LocalDateTime, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}

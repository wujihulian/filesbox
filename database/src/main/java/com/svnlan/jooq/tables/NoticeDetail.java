/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables;


import com.svnlan.jooq.CloudDisk;
import com.svnlan.jooq.Indexes;
import com.svnlan.jooq.Keys;
import com.svnlan.jooq.tables.records.NoticeDetailRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 通知详情表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NoticeDetail extends TableImpl<NoticeDetailRecord> {

    private static final long serialVersionUID = -1500769866;

    /**
     * The reference instance of <code>cloud_disk.notice_detail</code>
     */
    public static final NoticeDetail NOTICE_DETAIL = new NoticeDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NoticeDetailRecord> getRecordType() {
        return NoticeDetailRecord.class;
    }

    /**
     * The column <code>cloud_disk.notice_detail.id</code>.
     */
    public final TableField<NoticeDetailRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cloud_disk.notice_detail.notice_id</code>. 通知id
     */
    public final TableField<NoticeDetailRecord, Long> NOTICE_ID = createField(DSL.name("notice_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "通知id");

    /**
     * The column <code>cloud_disk.notice_detail.content</code>. 消息内容
     */
    public final TableField<NoticeDetailRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "消息内容");

    /**
     * The column <code>cloud_disk.notice_detail.is_all</code>. 是否为所有用户 1 是 0 否
     */
    public final TableField<NoticeDetailRecord, Integer> IS_ALL = createField(DSL.name("is_all"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "是否为所有用户 1 是 0 否");

    /**
     * The column <code>cloud_disk.notice_detail.target_user_ids</code>. 目标用户id集合
     */
    public final TableField<NoticeDetailRecord, JSON> TARGET_USER_IDS = createField(DSL.name("target_user_ids"), org.jooq.impl.SQLDataType.JSON, this, "目标用户id集合");

    /**
     * The column <code>cloud_disk.notice_detail.target_dept_ids</code>. 目标部门id集合
     */
    public final TableField<NoticeDetailRecord, JSON> TARGET_DEPT_IDS = createField(DSL.name("target_dept_ids"), org.jooq.impl.SQLDataType.JSON, this, "目标部门id集合");

    /**
     * The column <code>cloud_disk.notice_detail.target_role_ids</code>. 目标角色id集合
     */
    public final TableField<NoticeDetailRecord, JSON> TARGET_ROLE_IDS = createField(DSL.name("target_role_ids"), org.jooq.impl.SQLDataType.JSON, this, "目标角色id集合");

    /**
     * The column <code>cloud_disk.notice_detail.notice_detail_id</code>. 通知详情表id
     */
    public final TableField<NoticeDetailRecord, Long> NOTICE_DETAIL_ID = createField(DSL.name("notice_detail_id"), org.jooq.impl.SQLDataType.BIGINT, this, "通知详情表id");

    /**
     * The column <code>cloud_disk.notice_detail.create_time</code>. 创建时间
     */
    public final TableField<NoticeDetailRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>cloud_disk.notice_detail.modify_time</code>. 更新时间
     */
    public final TableField<NoticeDetailRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "更新时间");

    /**
     * The column <code>cloud_disk.notice_detail.dr</code>. 逻辑删除 0 未删除 1 已删除
     */
    public final TableField<NoticeDetailRecord, Integer> DR = createField(DSL.name("dr"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "逻辑删除 0 未删除 1 已删除");

    /**
     * The column <code>cloud_disk.notice_detail.tenant_id</code>. 租户id
     */
    public final TableField<NoticeDetailRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), org.jooq.impl.SQLDataType.BIGINT, this, "租户id");

    /**
     * Create a <code>cloud_disk.notice_detail</code> table reference
     */
    public NoticeDetail() {
        this(DSL.name("notice_detail"), null);
    }

    /**
     * Create an aliased <code>cloud_disk.notice_detail</code> table reference
     */
    public NoticeDetail(String alias) {
        this(DSL.name(alias), NOTICE_DETAIL);
    }

    /**
     * Create an aliased <code>cloud_disk.notice_detail</code> table reference
     */
    public NoticeDetail(Name alias) {
        this(alias, NOTICE_DETAIL);
    }

    private NoticeDetail(Name alias, Table<NoticeDetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private NoticeDetail(Name alias, Table<NoticeDetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("通知详情表"));
    }

    public <O extends Record> NoticeDetail(Table<O> child, ForeignKey<O, NoticeDetailRecord> key) {
        super(child, key, NOTICE_DETAIL);
    }

    @Override
    public Schema getSchema() {
        return CloudDisk.CLOUD_DISK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOTICE_DETAIL_PRIMARY);
    }

    @Override
    public Identity<NoticeDetailRecord, Long> getIdentity() {
        return Keys.IDENTITY_NOTICE_DETAIL;
    }

    @Override
    public UniqueKey<NoticeDetailRecord> getPrimaryKey() {
        return Keys.KEY_NOTICE_DETAIL_PRIMARY;
    }

    @Override
    public List<UniqueKey<NoticeDetailRecord>> getKeys() {
        return Arrays.<UniqueKey<NoticeDetailRecord>>asList(Keys.KEY_NOTICE_DETAIL_PRIMARY);
    }

    @Override
    public NoticeDetail as(String alias) {
        return new NoticeDetail(DSL.name(alias), this);
    }

    @Override
    public NoticeDetail as(Name alias) {
        return new NoticeDetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NoticeDetail rename(String name) {
        return new NoticeDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NoticeDetail rename(Name name) {
        return new NoticeDetail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, String, Integer, JSON, JSON, JSON, Long, LocalDateTime, LocalDateTime, Integer, Long> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}

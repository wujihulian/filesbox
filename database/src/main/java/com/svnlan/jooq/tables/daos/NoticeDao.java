/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables.daos;


import com.svnlan.jooq.tables.Notice;
import com.svnlan.jooq.tables.pojos.NoticeModel;
import com.svnlan.jooq.tables.records.NoticeRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 通知表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NoticeDao extends DAOImpl<NoticeRecord, NoticeModel, Long> {

    /**
     * Create a new NoticeDao without any configuration
     */
    public NoticeDao() {
        super(Notice.NOTICE, NoticeModel.class);
    }

    /**
     * Create a new NoticeDao with an attached configuration
     */
    public NoticeDao(Configuration configuration) {
        super(Notice.NOTICE, NoticeModel.class, configuration);
    }

    @Override
    public Long getId(NoticeModel object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<NoticeModel> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Notice.NOTICE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<NoticeModel> fetchById(Long... values) {
        return fetch(Notice.NOTICE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public NoticeModel fetchOneById(Long value) {
        return fetchOne(Notice.NOTICE.ID, value);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<NoticeModel> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Notice.NOTICE.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<NoticeModel> fetchByTitle(String... values) {
        return fetch(Notice.NOTICE.TITLE, values);
    }

    /**
     * Fetch records that have <code>level BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<NoticeModel> fetchRangeOfLevel(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Notice.NOTICE.LEVEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>level IN (values)</code>
     */
    public List<NoticeModel> fetchByLevel(Integer... values) {
        return fetch(Notice.NOTICE.LEVEL, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<NoticeModel> fetchRangeOfStatus(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Notice.NOTICE.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<NoticeModel> fetchByStatus(Integer... values) {
        return fetch(Notice.NOTICE.STATUS, values);
    }

    /**
     * Fetch records that have <code>enable BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<NoticeModel> fetchRangeOfEnable(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Notice.NOTICE.ENABLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enable IN (values)</code>
     */
    public List<NoticeModel> fetchByEnable(Integer... values) {
        return fetch(Notice.NOTICE.ENABLE, values);
    }

    /**
     * Fetch records that have <code>send_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<NoticeModel> fetchRangeOfSendType(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Notice.NOTICE.SEND_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>send_type IN (values)</code>
     */
    public List<NoticeModel> fetchBySendType(Integer... values) {
        return fetch(Notice.NOTICE.SEND_TYPE, values);
    }

    /**
     * Fetch records that have <code>send_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<NoticeModel> fetchRangeOfSendTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Notice.NOTICE.SEND_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>send_time IN (values)</code>
     */
    public List<NoticeModel> fetchBySendTime(LocalDateTime... values) {
        return fetch(Notice.NOTICE.SEND_TIME, values);
    }

    /**
     * Fetch records that have <code>sort BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<NoticeModel> fetchRangeOfSort(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Notice.NOTICE.SORT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sort IN (values)</code>
     */
    public List<NoticeModel> fetchBySort(Long... values) {
        return fetch(Notice.NOTICE.SORT, values);
    }

    /**
     * Fetch records that have <code>sender_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<NoticeModel> fetchRangeOfSenderId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Notice.NOTICE.SENDER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sender_id IN (values)</code>
     */
    public List<NoticeModel> fetchBySenderId(Long... values) {
        return fetch(Notice.NOTICE.SENDER_ID, values);
    }

    /**
     * Fetch records that have <code>sender_ip BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<NoticeModel> fetchRangeOfSenderIp(String lowerInclusive, String upperInclusive) {
        return fetchRange(Notice.NOTICE.SENDER_IP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sender_ip IN (values)</code>
     */
    public List<NoticeModel> fetchBySenderIp(String... values) {
        return fetch(Notice.NOTICE.SENDER_IP, values);
    }

    /**
     * Fetch records that have <code>notice_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<NoticeModel> fetchRangeOfNoticeType(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Notice.NOTICE.NOTICE_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>notice_type IN (values)</code>
     */
    public List<NoticeModel> fetchByNoticeType(Integer... values) {
        return fetch(Notice.NOTICE.NOTICE_TYPE, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<NoticeModel> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Notice.NOTICE.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<NoticeModel> fetchByCreateTime(LocalDateTime... values) {
        return fetch(Notice.NOTICE.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>modify_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<NoticeModel> fetchRangeOfModifyTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Notice.NOTICE.MODIFY_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_time IN (values)</code>
     */
    public List<NoticeModel> fetchByModifyTime(LocalDateTime... values) {
        return fetch(Notice.NOTICE.MODIFY_TIME, values);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<NoticeModel> fetchRangeOfTenantId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Notice.NOTICE.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<NoticeModel> fetchByTenantId(Long... values) {
        return fetch(Notice.NOTICE.TENANT_ID, values);
    }
}

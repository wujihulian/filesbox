/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables;


import com.svnlan.jooq.CloudDisk;
import com.svnlan.jooq.Indexes;
import com.svnlan.jooq.Keys;
import com.svnlan.jooq.tables.records.CommentPraiseRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 评论点赞表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentPraise extends TableImpl<CommentPraiseRecord> {

    private static final long serialVersionUID = -1316339753;

    /**
     * The reference instance of <code>cloud_disk.comment_praise</code>
     */
    public static final CommentPraise COMMENT_PRAISE = new CommentPraise();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentPraiseRecord> getRecordType() {
        return CommentPraiseRecord.class;
    }

    /**
     * The column <code>cloud_disk.comment_praise.id</code>.
     */
    public final TableField<CommentPraiseRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cloud_disk.comment_praise.comment_id</code>. 评论ID
     */
    public final TableField<CommentPraiseRecord, Long> COMMENT_ID = createField(DSL.name("comment_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "评论ID");

    /**
     * The column <code>cloud_disk.comment_praise.user_id</code>. 用户ID
     */
    public final TableField<CommentPraiseRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户ID");

    /**
     * The column <code>cloud_disk.comment_praise.create_time</code>. 创建时间
     */
    public final TableField<CommentPraiseRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>cloud_disk.comment_praise.modify_time</code>. 修改时间
     */
    public final TableField<CommentPraiseRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "修改时间");

    /**
     * The column <code>cloud_disk.comment_praise.tenant_id</code>. 租户id
     */
    public final TableField<CommentPraiseRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), org.jooq.impl.SQLDataType.BIGINT, this, "租户id");

    /**
     * Create a <code>cloud_disk.comment_praise</code> table reference
     */
    public CommentPraise() {
        this(DSL.name("comment_praise"), null);
    }

    /**
     * Create an aliased <code>cloud_disk.comment_praise</code> table reference
     */
    public CommentPraise(String alias) {
        this(DSL.name(alias), COMMENT_PRAISE);
    }

    /**
     * Create an aliased <code>cloud_disk.comment_praise</code> table reference
     */
    public CommentPraise(Name alias) {
        this(alias, COMMENT_PRAISE);
    }

    private CommentPraise(Name alias, Table<CommentPraiseRecord> aliased) {
        this(alias, aliased, null);
    }

    private CommentPraise(Name alias, Table<CommentPraiseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("评论点赞表"));
    }

    public <O extends Record> CommentPraise(Table<O> child, ForeignKey<O, CommentPraiseRecord> key) {
        super(child, key, COMMENT_PRAISE);
    }

    @Override
    public Schema getSchema() {
        return CloudDisk.CLOUD_DISK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMMENT_PRAISE_COMMENTID_USERID, Indexes.COMMENT_PRAISE_PRIMARY);
    }

    @Override
    public Identity<CommentPraiseRecord, Long> getIdentity() {
        return Keys.IDENTITY_COMMENT_PRAISE;
    }

    @Override
    public UniqueKey<CommentPraiseRecord> getPrimaryKey() {
        return Keys.KEY_COMMENT_PRAISE_PRIMARY;
    }

    @Override
    public List<UniqueKey<CommentPraiseRecord>> getKeys() {
        return Arrays.<UniqueKey<CommentPraiseRecord>>asList(Keys.KEY_COMMENT_PRAISE_PRIMARY, Keys.KEY_COMMENT_PRAISE_COMMENTID_USERID);
    }

    @Override
    public CommentPraise as(String alias) {
        return new CommentPraise(DSL.name(alias), this);
    }

    @Override
    public CommentPraise as(Name alias) {
        return new CommentPraise(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommentPraise rename(String name) {
        return new CommentPraise(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommentPraise rename(Name name) {
        return new CommentPraise(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, LocalDateTime, LocalDateTime, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}

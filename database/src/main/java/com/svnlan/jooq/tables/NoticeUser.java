/*
 * This file is generated by jOOQ.
 */
package com.svnlan.jooq.tables;


import com.svnlan.jooq.CloudDisk;
import com.svnlan.jooq.Indexes;
import com.svnlan.jooq.Keys;
import com.svnlan.jooq.tables.records.NoticeUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 通知用户关联表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NoticeUser extends TableImpl<NoticeUserRecord> {

    private static final long serialVersionUID = 1104781047;

    /**
     * The reference instance of <code>cloud_disk.notice_user</code>
     */
    public static final NoticeUser NOTICE_USER = new NoticeUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NoticeUserRecord> getRecordType() {
        return NoticeUserRecord.class;
    }

    /**
     * The column <code>cloud_disk.notice_user.id</code>.
     */
    public final TableField<NoticeUserRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cloud_disk.notice_user.user_id</code>. 用户id
     */
    public final TableField<NoticeUserRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户id");

    /**
     * The column <code>cloud_disk.notice_user.notice_id</code>. 通知id集合
     */
    public final TableField<NoticeUserRecord, Long> NOTICE_ID = createField(DSL.name("notice_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "通知id集合");

    /**
     * The column <code>cloud_disk.notice_user.is_read</code>. 是否已读 0 未读 1 已读
     */
    public final TableField<NoticeUserRecord, Integer> IS_READ = createField(DSL.name("is_read"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "是否已读 0 未读 1 已读");

    /**
     * The column <code>cloud_disk.notice_user.create_time</code>. 创建时间
     */
    public final TableField<NoticeUserRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>cloud_disk.notice_user.modify_time</code>. 更新时间
     */
    public final TableField<NoticeUserRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "更新时间");

    /**
     * The column <code>cloud_disk.notice_user.tenant_id</code>. 租户id
     */
    public final TableField<NoticeUserRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), org.jooq.impl.SQLDataType.BIGINT, this, "租户id");

    /**
     * Create a <code>cloud_disk.notice_user</code> table reference
     */
    public NoticeUser() {
        this(DSL.name("notice_user"), null);
    }

    /**
     * Create an aliased <code>cloud_disk.notice_user</code> table reference
     */
    public NoticeUser(String alias) {
        this(DSL.name(alias), NOTICE_USER);
    }

    /**
     * Create an aliased <code>cloud_disk.notice_user</code> table reference
     */
    public NoticeUser(Name alias) {
        this(alias, NOTICE_USER);
    }

    private NoticeUser(Name alias, Table<NoticeUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private NoticeUser(Name alias, Table<NoticeUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("通知用户关联表"));
    }

    public <O extends Record> NoticeUser(Table<O> child, ForeignKey<O, NoticeUserRecord> key) {
        super(child, key, NOTICE_USER);
    }

    @Override
    public Schema getSchema() {
        return CloudDisk.CLOUD_DISK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOTICE_USER_PRIMARY, Indexes.NOTICE_USER_USER_NOTICE_KEY);
    }

    @Override
    public Identity<NoticeUserRecord, Long> getIdentity() {
        return Keys.IDENTITY_NOTICE_USER;
    }

    @Override
    public UniqueKey<NoticeUserRecord> getPrimaryKey() {
        return Keys.KEY_NOTICE_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<NoticeUserRecord>> getKeys() {
        return Arrays.<UniqueKey<NoticeUserRecord>>asList(Keys.KEY_NOTICE_USER_PRIMARY, Keys.KEY_NOTICE_USER_USER_NOTICE_KEY);
    }

    @Override
    public NoticeUser as(String alias) {
        return new NoticeUser(DSL.name(alias), this);
    }

    @Override
    public NoticeUser as(Name alias) {
        return new NoticeUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NoticeUser rename(String name) {
        return new NoticeUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NoticeUser rename(Name name) {
        return new NoticeUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Integer, LocalDateTime, LocalDateTime, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}

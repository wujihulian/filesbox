<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.svnlan.user.dao.UserDao">
    <resultMap id="BaseResultMap" type="com.svnlan.user.domain.User">
        <id column="userID" jdbcType="BIGINT" property="userID"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="lastLogin" jdbcType="TIMESTAMP" property="lastLogin"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
        <result column="nickname" jdbcType="VARCHAR" property="nickname"/>
        <result column="status" property="status"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="sex" property="sex"/>
        <result column="roleID" property="roleID"/>
    </resultMap>

    <sql id="Base_Column_List">
		u.userID, u.`name`, u.nickname, u.lastLogin, u.phone, u.email, u.`status`, u.sex, u.avatar, u.roleID, u.dingOpenId, u.wechatOpenId, u.alipayOpenId, u.enWechatOpenId
	</sql>

    <insert id="insert"  useGeneratedKeys="true" keyProperty="userID" >
        INSERT INTO `user` ( `name`, `roleID`, `email`, `phone`, `nickname`, `avatar`, `sex`, `password`, `sizeMax`, `sizeUse`, `status`, `lastLogin`
        , `modifyTime`, `createTime`, `dingOpenId`, wechatOpenId, alipayOpenId) VALUES
    (#{name}, #{roleID}, IFNULL(#{email}, ''), IFNULL(#{phone}, ''), IFNULL(#{nickname}, ''), IFNULL(#{avatar}, ''), #{sex}, #{password}, #{sizeMax}, IFNULL(#{sizeUse}, 0), IFNULL(#{status}, 1)
    ,	unix_timestamp(now()),	unix_timestamp(now()),	unix_timestamp(now()), #{dingOpenId}, #{wechatOpenId}, #{alipayOpenId});

    </insert>
    <update id="update" >
        update `user`
        set
        <if test="name != null and name !=''">
            `name` = #{name},
        </if>
        <if test="roleID != null">
            `roleID` = #{roleID},
        </if>
        <if test="sizeMax != null">
            `sizeMax` = #{sizeMax},
        </if>
        <if test="email != null ">
            `email` = #{email},
        </if>
        <if test="avatar != null ">
            `avatar` = #{avatar},
        </if>
        <if test="phone != null ">
            `phone` = #{phone},
        </if>
        <if test="nickname != null ">
            `nickname` = #{nickname},
        </if>
        <if test="sex != null">
            `sex` = #{sex},
        </if>
        <if test="dingOpenId != null and dingOpenId != ''">
            dingOpenId = #{dingOpenId},
        </if>
        <if test="enWechatOpenId != null and enWechatOpenId != ''">
            enWechatOpenId = #{enWechatOpenId},
        </if>
        <if test="wechatOpenId != null and wechatOpenId != ''">
            wechatOpenId = #{wechatOpenId},
        </if>
        <if test="alipayOpenId != null and alipayOpenId != ''">
            alipayOpenId = #{alipayOpenId},
        </if>
        <if test="password != null and password != '' ">
            `password` = #{password},
        </if>
         modifyTime = unix_timestamp(now())
        where userID = #{userID}
    </update>

    <select id="getUserInfo" resultType="com.svnlan.user.vo.UserVo">
        select
        <include refid="Base_Column_List"/>, u.password, u.sizeMax, u.sizeUse
        , r.role_name roleName, r.code, r.description, r.label, r.auth, u.is_system isSystem, r.administrator, r.ignoreFileSize
        from `user` u
        left join `role` r on u.roleID = r.roleID and r.status = 1 and r.enable = 1
        where u.userID = #{userID}
        and u.status = 1
    </select>

    <select id="getUserListByParam" resultType="com.svnlan.user.vo.UserVo">
        select DISTINCT
        <include refid="Base_Column_List"/>, u.sizeMax, u.sizeUse, r.role_name roleName, r.label, u.is_system isSystem
        from `user` u
        left join `role` r on u.roleID = r.roleID and r.status = 1 and r.enable = 1
        <if test="groupID != null ">
            left join `user_group` ug on u.userID = ug.userID
        </if>
        <if test="keyword != null and keyword !='' ">
            left join `user_meta` um on u.userID = um.userID and um.`key` in ('namePinyin','namePinyinSimple')
        </if>
        <if test="groupLevelList != null ">
            left join `user_group` ug on u.userID = ug.userID
            left join `group` g on g.groupID = ug.groupID
        </if>
        where
        <choose>
            <when test=" status != null">
                u.status = #{status}
            </when >
            <otherwise>
                u.status in (1,0)
            </otherwise>
        </choose>
        <if test="groupID != null ">
           and ug.groupID = #{groupID}
        </if>
        <if test="keyword != null and keyword !='' ">
            and (u.name LIKE CONCAT(#{keyword}, '%') OR u.nickname LIKE CONCAT(#{keyword}, '%') OR u.phone LIKE CONCAT(#{keyword}, '%')
            OR u.email LIKE CONCAT(#{keyword}, '%') OR um.`value` LIKE CONCAT('%',#{keyword}, '%')
            )
        </if>
        <if test="groupLevelList != null ">
            and (
            <foreach collection="groupLevelList" item="item" index="index" separator="or">
                ( g.parentLevel like concat(#{item},'%'))
            </foreach>
            )
        </if>

        order by ${sortField} ${sortType}, u.userID asc
    </select>

    <update id="updateUserState" parameterType="com.svnlan.user.dto.UserDTO">
        update `user`
        set `status` = #{status}, modifyTime = unix_timestamp(now())
        where userID in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </update>
    <update id="updateNickname" >
        update `user`
        set `nickname` = #{nickname},
        modifyTime = unix_timestamp(now())
        where userID = #{userID}
    </update>
    <update id="updateEmail" >
        update `user`
        set `email` = #{email},
        modifyTime = unix_timestamp(now())
        where userID = #{userID}
    </update>
    <update id="updatePassword" >
        update `user`
        set `password` = #{password},
        modifyTime = unix_timestamp(now())
        where userID = #{userID}
    </update>
    <!-- 验证邮箱是否存在 -->
    <select id="findByEmail" resultType="int">
        select count(1)
        from `user`
        where email = #{email}
            and status in (1,0)
        limit 1
    </select>
    <!-- 验证昵称是否存在 -->
    <select id="findByNickname" resultType="int">
        select count(1)
        from `user`
        where nickname = #{nickname}
            and status in (1,0)
        limit 1
    </select>

    <select id="getUserSimpleInfo" resultType="com.svnlan.user.vo.UserVo">
        select
        <include refid="Base_Column_List"/>, u.password
        from `user` u
        where u.userID = #{userID}
        and u.status = 1
    </select>
    <select id="findByName" resultType="com.svnlan.user.vo.UserVo">
        select userID, `name`
        from `user`
        where `name` = #{name}
            and status in (1,0)
    </select>

    <select id="getUserBaseInfo" resultType="com.svnlan.user.vo.UserVo">
        select u.userID, u.`name`, u.nickname, u.`status`, u.sex, u.avatar
        from `user` u
        where u.userID in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>
    <select id="getUserBaseOneInfo" resultType="com.svnlan.user.vo.UserVo">
        select u.userID, u.`name`, u.nickname, u.`status`, u.sex, u.avatar, u.sizeMax, u.sizeUse
        from `user` u
        where u.userID = #{userID}
    </select>

    <update id="updateSex" >
        update `user`
        set `sex` = #{sex},
        modifyTime = unix_timestamp(now())
        where userID = #{userID}
    </update>
    <update id="updateAvatar" >
        update `user`
        set `avatar` = #{avatar},
        modifyTime = unix_timestamp(now())
        where userID = #{userID}
    </update>
    <update id="updateAvatarList" >
        update `user`
        set `avatar` = #{avatar},
        modifyTime = unix_timestamp(now())
        where userID in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </update>
    <select id="findByPhone" resultType="com.svnlan.user.vo.UserVo">
        select userID, `name`
        from `user`
        where `phone` = #{phone}
            and status in (1,0)
    </select>
    <select id="queryUserInfoByOpenIdOrMobile" resultType="com.svnlan.user.vo.UserVo">
        SELECT userID, avatar, phone, email, nickname, dingOpenId, wechatOpenId, alipayOpenId, enWechatOpenId, `status` FROM `user`
        <where>
            `status` != 2
            AND (
            <if test='code == "8"'>
                dingOpenId = #{openId}
            </if>
            <if test='code == "2"'>
                wechatOpenId = #{openId}
            </if>
            <if test='code == "6"'>
                alipayOpenId = #{openId}
            </if>
            <if test='code == "7"'>
                enWechatOpenId = #{openId}
            </if>
            <if test="mobile != null and mobile !=''">
                OR phone = #{mobile}
            </if>
            )
        </where>
    </select>
    <update id="updatePhone" >
        update `user`
        set `phone` = #{phone},
        modifyTime = unix_timestamp(now())
        where userID = #{userID}
    </update>
    <select id="getUserSimpleInfoByIds" resultType="com.svnlan.user.vo.UserVo">
        SELECT userID userId, ifnull(if(length(nickname)>0,nickname,null),name) name, avatar
        FROM user WHERE status = 1
        AND userID IN
        <foreach collection="userIds" item="_id" open="(" separator="," close=")">
            #{_id}
        </foreach>
      
    </select>
    <select id="getUserIdByRoleId" resultType="java.lang.Long">
        SELECT userID FROM `user`
        WHERE roleID IN
        <foreach collection="roleIdList" item="_roleId" open="(" separator="," close=")">
            #{_roleId}
        </foreach>
    </select>
</mapper>